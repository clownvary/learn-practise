'use strict';

exports.__esModule = true;
exports.createForm = undefined;

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _Form$contextTypes;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('active.css/less/components/form.less');

require('active.css/less/components/grid.less');

var _FormError = require('./form/FormError');

var _FormError2 = _interopRequireDefault(_FormError);

var _HFormFieldLayout = require('./form/HFormFieldLayout');

var _HFormFieldLayout2 = _interopRequireDefault(_HFormFieldLayout);

var _VFormFieldLayout = require('./form/VFormFieldLayout');

var _VFormFieldLayout2 = _interopRequireDefault(_VFormFieldLayout);

var _createField = require('./form/createField');

var _createField2 = _interopRequireDefault(_createField);

var _store = require('./form/store');

var _store2 = _interopRequireDefault(_store);

var _utils = require('./shared/utils');

var _types = require('./form/types');

var _utils2 = require('./form/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var aauiFormStore = (0, _keys2.default)(_types.FormStorePropTypes)[0];
var FormDefaultConfig = {
  preSubmit: _utils.noop,
  shouldSubmit: function shouldSubmit() {
    return true;
  },
  onSubmit: _utils.noop,
  postSubmit: _utils.noop,
  onFail: _utils.noop,
  preChange: _utils.identity,
  onChange: _utils.noop,
  fields: {}
};

var Form = function (_PureComponent) {
  (0, _inherits3.default)(Form, _PureComponent);

  function Form(props, context) {
    (0, _classCallCheck3.default)(this, Form);

    // Sync the `this.state` and `this.store.currentState`
    var _this = (0, _possibleConstructorReturn3.default)(this, _PureComponent.call(this, props, context));

    _this.handleSubmit = function (e) {
      /* eslint-disable */
      e && e.preventDefault && e.preventDefault();

      _this.store.tryInvokeValidators();

      var _this$props = _this.props,
          preSubmit = _this$props.preSubmit,
          shouldSubmit = _this$props.shouldSubmit,
          onSubmit = _this$props.onSubmit,
          postSubmit = _this$props.postSubmit,
          onFail = _this$props.onFail;

      var _reduceFields = (0, _utils2.reduceFields)(_this.store.getState()),
          values = _reduceFields.values,
          errors = _reduceFields.errors,
          isValid = _reduceFields.isValid;

      if (!isValid) {
        return onFail(errors);
      }

      if (shouldSubmit(values, preSubmit(values))) {
        onSubmit(values);
      }

      return postSubmit(values);
    };

    _this.handleChange = function () {
      var fields = _this.store.getState();

      var _reduceFields2 = (0, _utils2.reduceFields)(fields),
          values = _reduceFields2.values,
          errors = _reduceFields2.errors,
          isValid = _reduceFields2.isValid;

      var _reduceFields3 = (0, _utils2.reduceFields)(_this.state.fields),
          currentValues = _reduceFields3.values,
          currentErrors = _reduceFields3.errors;

      var _this$props2 = _this.props,
          preChange = _this$props2.preChange,
          onChange = _this$props2.onChange;


      if (!(0, _utils.shallowEqual)(currentValues, values) || !(0, _utils.shallowEqual)(currentErrors, errors)) {
        // trigger 'onChange' here on purpose
        onChange({ values: preChange(values), errors: errors });

        _this.setState({ fields: fields, isValid: isValid });
      }
    };

    _this.state = _this.getInitState();
    _this.parentStore = props[aauiFormStore] || context[aauiFormStore];
    _this.store = new _store2.default((0, _extends4.default)({}, props, {
      initialState: _this.state.fields
    }));
    // Keep the child store reference from the parent store
    if (_this.parentStore) {
      _this.parentStore.childStoreList = [].concat(_this.parentStore.childStoreList, [_this.store]);
    }
    return _this;
  }

  Form.prototype.getChildContext = function getChildContext() {
    var _ref;

    return _ref = {}, _ref[aauiFormStore] = this.store, _ref;
  };

  Form.prototype.componentDidMount = function componentDidMount() {
    this.unsubscribe = this.store.subscribe(this.handleChange);
  };

  Form.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
    }
  };

  Form.prototype.getInitState = function getInitState() {
    /* eslint-disable max-len */
    // {fieldName:{defaultValue:"first name",validator:validator,rules:"",parser:a=>a,formatter:a=>a},email:{defaultValue:"defalut@defalut.com"}};
    var fields = this.props.fields;

    var reducedFields = (0, _keys2.default)(fields).filter(function (k) {
      return fields[k];
    }).reduce(function (r, k) {
      var _extends2;

      var field = fields[k];
      var value = void 0;

      // If `field` is string then it's value by default
      if (typeof field === 'string') {
        value = field;
      } else {
        value = field.value || field.defaultValue;
      }

      return (0, _extends4.default)({}, r, (_extends2 = {}, _extends2[k] = (0, _extends4.default)({}, (0, _utils.filterProps)(field, (0, _keys2.default)(_types.FormFieldPropTypes)), {
        value: value
      }), _extends2));
    }, {});

    return { fields: reducedFields, isValid: true };
  };

  // Here maybe it's better to have react's `context` but it's fine now
  Form.prototype.traverseChildren = function traverseChildren(children, fields) {
    var _this2 = this;

    return _react2.default.Children.map(children, function (child) {
      // If `child` is not Element then just return it
      if (!_react2.default.isValidElement(child)) {
        return child;
      }

      var childProps = {};

      if ((0, _createField.isRegisteredField)(child.type)) {
        childProps = (0, _extends4.default)({}, childProps, fields[child.props.name]);
      }

      childProps.children = _this2.traverseChildren(child.props.children, fields);

      return _react2.default.cloneElement(child, childProps);
    });
  };

  Form.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        _props$className = _props.className,
        className = _props$className === undefined ? 'form--horizontal' : _props$className;
    var fields = this.state.fields;

    var formChildren = this.traverseChildren(children, fields);

    // If we have the `this.parentStore` then it means we're the nested form
    if (this.parentStore) {
      return _react2.default.createElement(
        'div',
        null,
        formChildren
      );
    }

    // Todo: Update the error message with `Form.Error`
    return _react2.default.createElement(
      'form',
      {
        className: className,
        onSubmit: this.handleSubmit
      },
      formChildren
    );
  };

  return Form;
}(_react.PureComponent);

exports.default = Form;


Form.propTypes = (0, _extends4.default)({}, _types.FormPropTypes);
Form.contextTypes = (_Form$contextTypes = {}, _Form$contextTypes[aauiFormStore] = _react.PropTypes.instanceOf(_store2.default), _Form$contextTypes);
Form.childContextTypes = (0, _extends4.default)({}, _types.FormStorePropTypes);
Form.defaultProps = (0, _extends4.default)({}, FormDefaultConfig);
Form.displayName = 'AAUIForm';
// Form Fields
Form.Field = (0, _createField2.default)();
Form.HField = (0, _createField2.default)(_HFormFieldLayout2.default);
Form.VField = (0, _createField2.default)(_VFormFieldLayout2.default);
Form.Error = _FormError2.default;

/**
 * Provide utility function and lifecycle methods for `Form`
 */
var createForm = exports.createForm = function createForm() {
  var formConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (WrappedComponent) {
    var Connect = function (_PureComponent2) {
      (0, _inherits3.default)(Connect, _PureComponent2);

      function Connect() {
        (0, _classCallCheck3.default)(this, Connect);
        return (0, _possibleConstructorReturn3.default)(this, _PureComponent2.apply(this, arguments));
      }

      Connect.prototype.render = function render() {
        return _react2.default.createElement(WrappedComponent, this.props);
      };

      return Connect;
    }(_react.PureComponent);

    Connect.defaultProps = (0, _extends4.default)({}, FormDefaultConfig, formConfig);

    return Connect;
  };
};