'use strict';

exports.__esModule = true;

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends6 = require('babel-runtime/helpers/extends');

var _extends7 = _interopRequireDefault(_extends6);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _NestedForm = require('./NestedForm');

var _NestedForm2 = _interopRequireDefault(_NestedForm);

var _Form = require('../Form');

var _Form2 = _interopRequireDefault(_Form);

var _TextInput = require('./TextInput');

var _TextInput2 = _interopRequireDefault(_TextInput);

var _Combobox = require('./Combobox');

var _Combobox2 = _interopRequireDefault(_Combobox);

var _PostalCodeInput = require('./PostalCodeInput');

var _PostalCodeInput2 = _interopRequireDefault(_PostalCodeInput);

var _getContext = require('../shared/getContext');

var _getContext2 = _interopRequireDefault(_getContext);

var _types = require('../shared/types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var string = _react.PropTypes.string,
    object = _react.PropTypes.object,
    func = _react.PropTypes.func,
    node = _react.PropTypes.node,
    oneOfType = _react.PropTypes.oneOfType;

var propTypes = (0, _extends7.default)({
  countriesConfig: object.isRequired,
  fields: object,
  country: string,
  fieldLayout: oneOfType([node, func])
}, _types.aauiL10nPropTypes);
var defaultProps = {
  country: 'US',
  fields: {},
  fieldLayout: _Form2.default.HField
};
var FIELD_PREFIX = 'addressForm.addressField';

var AddressEditor = function (_PureComponent) {
  (0, _inherits3.default)(AddressEditor, _PureComponent);

  function AddressEditor(props, context) {
    (0, _classCallCheck3.default)(this, AddressEditor);

    var _this = (0, _possibleConstructorReturn3.default)(this, _PureComponent.call(this, props, context));

    _this.reduceFields = function (country) {
      var _this$props = _this.props,
          fields = _this$props.fields,
          countriesConfig = _this$props.countriesConfig;

      var countryConfig = countriesConfig[country];

      if (!countryConfig || !countryConfig.addressForm) {
        return {};
      }

      var countryAddressFields = countryConfig.addressForm.addressFields;

      return (0, _keys2.default)(countryAddressFields).reduce(function (r, k) {
        var _extends3;

        var countryAddressField = countryAddressFields[k];
        var addressPart = countryAddressField.addressPart,
            position = countryAddressField.position;

        var value = fields[addressPart];

        if (!value) {
          return r;
        }

        var valueArr = fields[addressPart].split('\n');

        // It means it has multiple parts for one address part
        if (position > 1) {
          var _extends2;

          return (0, _extends7.default)({}, r, (_extends2 = {}, _extends2[addressPart + '.' + position] = valueArr[position - 1] || '', _extends2));
        }

        return (0, _extends7.default)({}, r, (_extends3 = {}, _extends3[addressPart] = valueArr[0], _extends3));
      }, { country: country });
    };

    _this.reduceCountryAddressFields = function () {
      var country = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var countriesConfig = _this.props.countriesConfig;

      var countryConfig = countriesConfig[country];

      if (!countryConfig || !countryConfig.addressForm) {
        return [];
      }

      var code = countryConfig.iso3166Code;
      var countryAddressFields = countryConfig.addressForm.addressFields || [];

      return (0, _keys2.default)(countryAddressFields).reduce(function (r, k) {
        var countryAddressField = countryAddressFields[k];
        var required = countryAddressField.required,
            addressPart = countryAddressField.addressPart,
            position = countryAddressField.position,
            _countryAddressField$ = countryAddressField.options,
            options = _countryAddressField$ === undefined ? [] : _countryAddressField$;

        // Find the label key

        var label = FIELD_PREFIX + '.' + code + '.' + addressPart;
        if (position > 1) {
          label = label + '.' + position;
        }
        if (!_this.l10n.formatMessage(label)) {
          label = FIELD_PREFIX + '.' + addressPart;
        }

        var component = _TextInput2.default;
        var data = options.map(function (option) {
          return {
            text: _this.l10n.formatMessage(addressPart + '.displayName.' + code + '.' + option.fieldOptionValue),
            value: option.fieldOptionValue
          };
        });
        var reducedAddressField = {
          name: position > 1 ? addressPart + '.' + position : addressPart,
          label: label,
          component: component,
          required: required,
          data: data
        };

        if (options && options.length !== 0) {
          reducedAddressField = (0, _extends7.default)({}, reducedAddressField, {
            component: _Combobox2.default,
            maxHeight: '320px'
          });
        }

        if (addressPart === _PostalCodeInput.POSTAL_CODE_FIELD_KEY) {
          reducedAddressField = (0, _extends7.default)({}, reducedAddressField, {
            countryConfig: countryConfig,
            component: _PostalCodeInput2.default
          });
        }

        return [].concat(r, [reducedAddressField]);
      }, []);
    };

    _this.handlePreChange = function (values) {
      var countriesConfig = _this.props.countriesConfig;
      var country = _this.state.country;

      var valueKeys = (0, _keys2.default)(values);
      var countryConfig = countriesConfig[country];
      var countryAddressFields = countryConfig.addressForm.addressFields;

      return (0, _keys2.default)(countryAddressFields).reduce(function (r, k) {
        var _extends5;

        var countryAddressField = countryAddressFields[k];
        var addressPart = countryAddressField.addressPart,
            position = countryAddressField.position;

        var addressPartPart = addressPart + '.' + position;
        var addressPartPartValue = values[addressPartPart];

        // If found `line2.2`, `city.2`, `stateProvince.2`, `line2.3` or `city.3`
        if (position > 1 && addressPartPartValue && valueKeys.indexOf(addressPartPart)) {
          var _extends4;

          return (0, _extends7.default)({}, r, (_extends4 = {}, _extends4[addressPart] = r[addressPart] + '\n' + addressPartPartValue, _extends4));
        }

        return (0, _extends7.default)({}, r, (_extends5 = {}, _extends5[addressPart] = values[addressPart], _extends5));
      }, { country: country });
    };

    _this.handleCountryChange = function (_ref) {
      var country = _ref.value;

      _this.setState({ country: country });
    };

    _this.l10n = props.aauiL10n || context.aauiL10n;
    _this.state = _this.getInitState();
    return _this;
  }

  AddressEditor.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    this.unsubscribe = this.l10n.subscribe(function () {
      return _this2.forceUpdate();
    });
  };

  AddressEditor.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.unsubscribe) {
      this.unsubscribe();
    }

    this.unsubscribe = null;
  };

  AddressEditor.prototype.getInitState = function getInitState() {
    var fields = this.props.fields;

    var country = fields.country;

    if (!country) {
      country = this.props.country;
    }
    return {
      country: country,
      fields: this.reduceFields(country)
    };
  };

  AddressEditor.prototype.getAvailCountries = function getAvailCountries() {
    var _this3 = this;

    var countriesConfig = this.props.countriesConfig;


    return (0, _keys2.default)(countriesConfig).map(function (country) {
      return {
        text: _this3.l10n.formatMessage('country.displayName.' + country),
        value: country
      };
    });
  };

  // Split field value into multiple parts for `line2.2`, `city.2`, etc.


  AddressEditor.prototype.render = function render() {
    var _props = this.props,
        FieldLayout = _props.fieldLayout,
        rest = (0, _objectWithoutProperties3.default)(_props, ['fieldLayout']);
    var _state = this.state,
        country = _state.country,
        fields = _state.fields;

    var countries = this.getAvailCountries();
    var reducedCountryAddressFields = this.reduceCountryAddressFields(country);

    return _react2.default.createElement(
      _NestedForm2.default,
      (0, _extends7.default)({}, rest, { fields: fields, preChange: this.handlePreChange }),
      _react2.default.createElement(
        _Form2.default,
        null,
        _react2.default.createElement(FieldLayout, {
          maxHeight: '320px',
          name: 'country',
          label: FIELD_PREFIX + '.country',
          component: _Combobox2.default,
          data: countries,
          defaultValue: country,
          onChange: this.handleCountryChange
        }),
        reducedCountryAddressFields.map(function (f) {
          return _react2.default.createElement(FieldLayout, (0, _extends7.default)({
            key: f.name,
            name: f.name
          }, f));
        })
      )
    );
  };

  return AddressEditor;
}(_react.PureComponent);

AddressEditor.propTypes = propTypes;
AddressEditor.defaultProps = defaultProps;

exports.default = (0, _getContext2.default)((0, _extends7.default)({}, _types.aauiL10nPropTypes))(AddressEditor);
module.exports = exports['default'];