'use strict';

exports.__esModule = true;

var _taggedTemplateLiteralLoose2 = require('babel-runtime/helpers/taggedTemplateLiteralLoose');

var _taggedTemplateLiteralLoose3 = _interopRequireDefault(_taggedTemplateLiteralLoose2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _defineProperties = require('babel-runtime/core-js/object/define-properties');

var _defineProperties2 = _interopRequireDefault(_defineProperties);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _templateObject = (0, _taggedTemplateLiteralLoose3.default)(['dropdown ', ''], ['dropdown ', '']),
    _templateObject2 = (0, _taggedTemplateLiteralLoose3.default)(['dropdown__button ', ' ', ''], ['dropdown__button ', ' ', '']),
    _templateObject3 = (0, _taggedTemplateLiteralLoose3.default)(['', ''], ['', '']),
    _templateObject4 = (0, _taggedTemplateLiteralLoose3.default)(['dropdown__menu ', ''], ['dropdown__menu ', '']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('active.css/less/components/dropdown.less');

var _utils = require('./shared/utils');

var _dataAccess = require('./shared/data-access');

var da = _interopRequireWildcard(_dataAccess);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var string = _react.PropTypes.string,
    bool = _react.PropTypes.bool,
    func = _react.PropTypes.func,
    object = _react.PropTypes.object,
    any = _react.PropTypes.any;

var propTypes = {
  isMoreButton: bool,
  placeholder: string,
  className: string,
  value: string,
  disabled: bool,
  defaultValue: string,
  maxHeight: string,
  data: any,
  filter: bool,
  onChange: func,
  filterPlaceholder: string,
  style: object
};

var defaultProps = {
  placeholder: 'Select one...',
  filterPlaceholder: 'Filter...'
};

var Dropdown = function (_PureComponent) {
  (0, _inherits3.default)(Dropdown, _PureComponent);

  function Dropdown(props) {
    (0, _classCallCheck3.default)(this, Dropdown);

    var _this = (0, _possibleConstructorReturn3.default)(this, _PureComponent.call(this, props));

    _this.componentWillMount = function () {
      _this.keyboardValue = '';
      _this.clearKeyboardValue = (0, _utils.debounce)(function () {
        _this.keyboardValue = '';
      }, 600);
    };

    _this.componentDidMount = function () {
      (0, _defineProperties2.default)(_this, {
        value: {
          get: function get() {
            return this.state.value;
          },
          set: function set(v) {
            if (this.props.value === undefined) {
              this.setState({ value: v });
            }
          }
        }
      });
    };

    _this.componentWillReceiveProps = function (nextProps) {
      var newState = {};
      if (nextProps.value !== _this.props.value) {
        newState.value = nextProps.value;
      } else if (nextProps.defaultValue !== _this.props.defaultValue) {
        newState.value = _this.state.value === undefined ? nextProps.defaultValue : _this.state.value;
      }
      if (nextProps.data !== _this.props.data) {
        newState.dataView = nextProps.data;
      }
      if ((0, _keys2.default)(newState).length > 0) _this.setState(newState);
    };

    _this.componentDidUpdate = function () {
      if (_this.state.isExpanded) {
        if (_this.props.filter) {
          _this.filterInput.focus();
        } else {
          _this.itemMenu.focus();
        }

        var itemMenu = _this.itemMenu;
        var activeItem = itemMenu.querySelector('.selected');
        if (activeItem) {
          var itemMenuHeight = itemMenu.offsetHeight;
          var itemMenuScrollTop = itemMenu.scrollTop;
          var activeItemTop = activeItem.offsetTop;
          var activeItemHeight = activeItem.offsetHeight;
          /* eslint no-mixed-operators: 0 */
          if (activeItemTop + activeItemHeight - itemMenuHeight - itemMenuScrollTop > 0) {
            itemMenu.scrollTop = activeItemTop + activeItemHeight - itemMenuHeight;
          } else if (activeItemTop < itemMenuScrollTop) {
            itemMenu.scrollTop = activeItemTop;
          }
        }
      }
    };

    _this.getIndex = function (str) {
      var dataArray = _this.props.data.toJS ? _this.props.data.toJS() : _this.props.data;
      var index = 0;
      var value = '';
      var length = da.count(dataArray);
      var isFound = false;
      var keyWords = '';
      var i = 0;
      if (_this.state.keyWords && str.toUpperCase().indexOf(_this.state.keyWords) === 0) {
        i = _this.state.activeItemIndex + 1;
      }

      for (; i < length; i += 1) {
        value = da.get(dataArray[i], 'text');
        if (value.toUpperCase().indexOf(str) === 0) {
          index = i;
          isFound = true;
          keyWords = str;
          break;
        }
      }

      if (_this.state.keyWords && str.toUpperCase().indexOf(_this.state.keyWords) === 0) {
        if (!isFound) {
          for (i = 0; i < length; i += 1) {
            value = da.get(dataArray[i], 'text');
            if (value.toUpperCase().indexOf(str) === 0) {
              index = i;
              isFound = true;
              keyWords = str;
              break;
            }
          }
        }
      }

      return { index: index, isFound: isFound, keyWords: keyWords };
    };

    _this.tryCollapse = function () {
      if (_this.state.isExpanded) {
        _this._timer = setTimeout(function () {
          _this.setState({
            isExpanded: false
          });
        }, 100);
      }
    };

    _this.cancelCollapseTimeout = function () {
      clearTimeout(_this._timer);
    };

    _this.giveFocus = function (e) {
      if (e.target === _this.itemMenu) {
        _this.itemMenu.focus();
      }
    };

    _this.navigateByKeys = function (e) {
      if (e.keyCode === 9) {
        return;
      } //  focus next component if there are many input, dropdown
      // or others component on the screen when pressing tab.
      var isExpanded = false;
      e.preventDefault();
      /* eslint no-case-declarations: 0 */
      switch (e.keyCode) {
        case 38:
          // up (Previous item)
          _this.setState({
            activeItemIndex: _this.state.activeItemIndex - 1 >= 0 ? _this.state.activeItemIndex - 1 : da.count(_this.state.dataView) - 1,
            isExpanded: true
          });
          break;
        case 40:
          // down (Next item)
          _this.setState({
            activeItemIndex: _this.state.activeItemIndex + 1 < da.count(_this.state.dataView) ? _this.state.activeItemIndex + 1 : 0,
            isExpanded: true
          });
          break;
        case 13:
          // enter (Select the active item)
          var _this$state = _this.state,
              dataView = _this$state.dataView,
              activeItemIndex = _this$state.activeItemIndex;

          var value = da.get(dataView, activeItemIndex);
          value = da.get(value, 'value');
          _this.select(value);
          _this.dropdownButton.focus();
          break;
        case 27:
          // escape (Hide dropdown menu)
          _this.setState({
            isExpanded: false,
            activeItemIndex: _this.state.activeItemIndex
          });
          _this.dropdownButton.focus();
          break;
        case 32:
          // blank (Show dropdown menu)
          isExpanded = _this.state.isExpanded;
          if (isExpanded) {
            return; /* eslint no-useless-return: 0 */
          } else {
            /* eslint no-else-return: 0 */
            _this.setState({
              isExpanded: true,
              activeItemIndex: _this.state.activeItemIndex
            });
          }
          break;
        default:
          // Filter dropdown list by the key word
          if (!_this.props.filter) {
            var charStr = String.fromCharCode(e.keyCode);
            _this.keyboardValue = _this.keyboardValue + charStr;
            _this.filterFromKeyboard();
          }
      }
    };

    _this.applyFilter = function (e) {
      _this.setState({
        dataView: _this.filterData(e.target.value, _this.props.data)
      });
    };

    _this.handleKeys = function (e) {
      // Delegate up, down, and escape to itemMenu.
      if ([38, 40, 27].indexOf(e.keyCode) > -1) return;
      // Delegate enter to itemMenu if up/down selections are already made.
      if (e.keyCode === 13 && _this.state.activeItemIndex > -1) return;
      e.stopPropagation();
    };

    _this.select = function (value) {
      var val = value;

      _this.setState({
        value: val,
        isExpanded: false,
        activeItemIndex: -1
      }, function () {
        if (_this.props.onChange) _this.props.onChange({ value: value });
      });
    };

    _this.findItemByValue = function (value) {
      /* eslint no-restricted-syntax: 0 */
      for (var _iterator = _this.props.data, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var item = _ref;

        if (da.get(item, 'value') === value) {
          return item;
        }
      }
      return undefined;
    };

    _this.findTextByValue = function (value) {
      var item = _this.findItemByValue(value);
      if (item) {
        return da.get(item, 'text');
      } else {
        return undefined;
      }
    };

    _this.filterData = function (key, dataset) {
      var k = key.trim().toLowerCase();
      var klen = k.length;

      function matcher(item) {
        var t = da.get(item, 'text').trim().toLowerCase();
        var i = 0;
        var kc = k.charAt(i);
        for (var _iterator2 = t, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var tc = _ref2;

          if (tc === kc) {
            i += 1;
            if (i >= klen) {
              return true;
            }
            kc = k.charAt(i);
          }
        }
        return false;
      }

      return !k ? dataset : dataset.filter(matcher);
    };

    _this.clearKeyboard = function (e) {
      e.persist();
      _this.clearKeyboardValue(e);
    };

    _this.filterFromKeyboard = function () {
      var result = _this.getIndex(_this.keyboardValue);
      if (result.isFound) {
        _this.setState({
          activeItemIndex: result.index,
          keyWords: result.keyWords
        });
      }
    };

    _this.toggleMenu = function () {
      clearTimeout(_this._timer);

      _this.setState({
        isExpanded: !_this.state.isExpanded
      });
    };

    _this.handleInputOnclick = function (value) {
      return function () {
        _this.select(value);
      };
    };

    _this.render = function () {
      var _this$props = _this.props,
          className = _this$props.className,
          style = _this$props.style,
          disabled = _this$props.disabled,
          placeholder = _this$props.placeholder,
          maxHeight = _this$props.maxHeight,
          filter = _this$props.filter,
          filterPlaceholder = _this$props.filterPlaceholder,
          isMoreButton = _this$props.isMoreButton;
      var _this$state2 = _this.state,
          isExpanded = _this$state2.isExpanded,
          value = _this$state2.value,
          dataView = _this$state2.dataView,
          activeItemIndex = _this$state2.activeItemIndex;
      /* eslint jsx-a11y/role-has-required-aria-props: 0, jsx-a11y/aria-proptypes: 0 */
      /* eslint jsx-a11y/href-no-hash: 0, jsx-a11y/tabindex-no-positive: 0 */

      return _react2.default.createElement(
        'div',
        {
          className: (0, _utils.cls)(_templateObject, className || ''),
          style: style,
          onKeyUp: disabled ? undefined : _this.clearKeyboard,
          onKeyDown: disabled ? undefined : _this.navigateByKeys
        },
        _react2.default.createElement(
          'button',
          {
            type: 'button',
            ref: function ref(_ref3) {
              _this.dropdownButton = _ref3;
            },
            role: 'button',
            'aria-label': _this.findTextByValue(value)
            /* eslint no-nested-ternary: 0 */
            , className: (0, _utils.cls)(_templateObject2, isMoreButton ? isExpanded ? 'show' : '' : isExpanded ? 'expand' : 'collapse', disabled ? 'disabled' : ''),
            onMouseDown: function onMouseDown(e) {
              return e.preventDefault();
            },
            onClick: disabled ? undefined : _this.toggleMenu
          },
          _react2.default.createElement(
            'span',
            { className: 'dropdown__button-text' },
            _this.findTextByValue(value) || placeholder
          ),
          isMoreButton ? _react2.default.createElement('span', { className: 'icon-triangle-down' }) : _react2.default.createElement('span', { className: (0, _utils.cls)(_templateObject3, isExpanded ? 'icon-chevron-up' : 'icon-chevron-down') })
        ),
        _react2.default.createElement(
          'div',
          { role: 'combobox' },
          _react2.default.createElement(
            'ul',
            {
              className: (0, _utils.cls)(_templateObject4, isExpanded && !disabled ? 'show' : ''),
              'aria-expanded': isExpanded && !disabled,
              ref: function ref(_ref5) {
                _this.itemMenu = _ref5;
              },
              role: 'listbox',
              tabIndex: '1',
              style: { maxHeight: maxHeight },
              onMouseDown: _this.giveFocus,
              onFocus: _this.cancelCollapseTimeout,
              onBlur: _this.tryCollapse
            },
            filter ? _react2.default.createElement(
              'li',
              null,
              _react2.default.createElement(
                'div',
                { className: 'dropdown__menu__search-box' },
                _react2.default.createElement('i', { className: 'icon-search' }),
                _react2.default.createElement('input', {
                  type: 'text',
                  className: 'input',
                  ref: function ref(_ref4) {
                    _this.filterInput = _ref4;
                  },
                  role: 'textbox',
                  'aria-label': 'Search',
                  autoComplete: 'off',
                  placeholder: filterPlaceholder,
                  onKeyDown: _this.handleKeys,
                  onChange: _this.applyFilter
                })
              )
            ) : undefined,
            filter ? _react2.default.createElement('li', { className: 'dropdown__menu-divider', role: 'separator' }) : undefined,
            dataView.map(function (item, i) {
              return _react2.default.createElement(
                'li',
                {
                  key: da.get(item, 'value'),
                  role: 'option',
                  className: i === activeItemIndex ? 'selected' : undefined,
                  'aria-selected': i === activeItemIndex ? true : undefined,
                  onClick: _this.handleInputOnclick(da.get(item, 'value'))
                },
                _react2.default.createElement(
                  'a',
                  null,
                  da.get(item, 'text')
                )
              );
            })
          )
        )
      );
    };

    _this.state = {
      isExpanded: false,
      value: _this.props.value || _this.props.defaultValue,
      dataView: _this.props.data,
      activeItemIndex: -1
    };
    return _this;
  }

  return Dropdown;
}(_react.PureComponent);

exports.default = Dropdown;


Dropdown.displayName = 'AAUIDropdown';
Dropdown.propTypes = propTypes;
Dropdown.defaultProps = defaultProps;
module.exports = exports['default'];