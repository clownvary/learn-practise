import _extends from 'babel-runtime/helpers/extends';
import _taggedTemplateLiteralLoose from 'babel-runtime/helpers/taggedTemplateLiteralLoose';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _templateObject = _taggedTemplateLiteralLoose(['\n          search-box\n          ', '\n        '], ['\n          search-box\n          ', '\n        ']),
    _templateObject2 = _taggedTemplateLiteralLoose(['\n            search-box__input-addon-group\n            ', '\n          '], ['\n            search-box__input-addon-group\n            ', '\n          ']);

import React, { PureComponent, PropTypes } from 'react';

import 'active.css/less/icon.less';
import 'active.css/less/components/input-group.less';

import { cls, debounce } from './shared/utils';

var string = PropTypes.string,
    number = PropTypes.number,
    func = PropTypes.func,
    oneOf = PropTypes.oneOf;

var propTypes = {
  placeholder: string,
  searchBtnText: string,
  size: oneOf(['', 'lg']),
  onChange: func,
  delay: number
};
var defaultProps = {
  placeholder: 'Enter your search here...',
  searchBtnText: 'Search',
  size: '',
  delay: 500
};

var SearchInput = function (_PureComponent) {
  _inherits(SearchInput, _PureComponent);

  function SearchInput(props) {
    _classCallCheck(this, SearchInput);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

    _this.debouncedOnChange = function (value) {
      var onChange = _this.props.onChange;


      if (typeof onChange === 'function') {
        onChange(value.trim());
      }
    };

    _this.handleChange = function (e) {
      var value = e.target.value;

      _this.setState({
        value: value
      }, function () {
        _this.debouncedOnChange(value);
      });
    };

    _this.handleCloseIconClick = function () {
      _this.setState({
        value: ''
      });
    };

    _this.state = {
      value: ''
    };
    _this.debouncedOnChange = debounce(_this.debouncedOnChange, props.delay);
    return _this;
  }

  SearchInput.prototype.render = function render() {
    /* eslint-disable no-unused-vars */
    var _props = this.props,
        placeholder = _props.placeholder,
        searchBtnText = _props.searchBtnText,
        size = _props.size,
        delay = _props.delay,
        rest = _objectWithoutProperties(_props, ['placeholder', 'searchBtnText', 'size', 'delay']);

    var value = this.state.value;

    var hasFeedback = !!value;

    return React.createElement(
      'div',
      {
        className: cls(_templateObject, size ? 'search-box--' + size : '')
      },
      React.createElement(
        'div',
        {
          className: cls(_templateObject2, hasFeedback ? 'search-box__input-addon-group--has-feedback' : '')
        },
        React.createElement('i', { className: 'icon-search' }),
        React.createElement('input', _extends({}, rest, {
          className: 'input',
          type: 'search',
          value: value,
          placeholder: placeholder,
          onChange: this.handleChange
        })),
        hasFeedback && React.createElement('span', { className: 'icon-close input-feedback active', onClick: this.handleCloseIconClick })
      ),
      React.createElement(
        'button',
        { type: 'button', className: 'btn btn-primary' },
        searchBtnText
      )
    );
  };

  return SearchInput;
}(PureComponent);

export default SearchInput;


SearchInput.displayName = 'SearchInput';
SearchInput.propTypes = propTypes;
SearchInput.defaultProps = defaultProps;