import _taggedTemplateLiteralLoose from 'babel-runtime/helpers/taggedTemplateLiteralLoose';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$defineProperties from 'babel-runtime/core-js/object/define-properties';
import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _templateObject = _taggedTemplateLiteralLoose(['checkbox\n          ', '\n          ', '\n          ', ''], ['checkbox\n          ', '\n          ', '\n          ', '']);

import React, { PureComponent, PropTypes } from 'react';
import 'active.css/less/components/checkbox.less';

import { cls } from './shared/utils';
import KEY_CODES from './shared/keyCodes';

var bool = PropTypes.bool,
    string = PropTypes.string,
    object = PropTypes.object,
    func = PropTypes.func,
    any = PropTypes.any;

var propTypes = {
  size: string,
  children: any,
  className: string,
  style: object,
  disabled: bool,
  checked: bool,
  defaultChecked: bool,
  onChange: func
};
var defaultProps = {};

var Checkbox = function (_PureComponent) {
  _inherits(Checkbox, _PureComponent);

  function Checkbox(props) {
    _classCallCheck(this, Checkbox);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

    _this.setWrappedComponentInstance = function (input) {
      _this.input = input;
    };

    _this.handleChange = function (e) {
      e.persist();

      _this.setState({
        checked: e.target.checked
      }, function () {
        if (_this.props.onChange) {
          _this.props.onChange(e);
        }
      });
    };

    _this.handleKeyDown = function (e) {
      e.persist();

      // Prevent scrolling when pressing any scroll key (e.g. down arrow, spacebar) when on a widget
      switch (e.keyCode) {
        case KEY_CODES.SPACE:
          // SPACEBAR
          e.preventDefault();

          _this.setState({
            checked: !_this.state.checked
          }, function () {
            if (_this.props.onChange) {
              // We must change the `target` property
              // in order to feed the `onChange` callback when triggering on the container
              _this.props.onChange(_extends({}, e, {
                target: _this.input
              }));
            }
          });
          break;
        case KEY_CODES.UPARROW: // UPARROW
        case KEY_CODES.DOWNARROW:
          // DOWNARROW
          e.preventDefault();
          break;
        default:
          break;
      }
    };

    var _props$defaultChecked = props.defaultChecked,
        defaultChecked = _props$defaultChecked === undefined ? false : _props$defaultChecked,
        _props$checked = props.checked,
        checked = _props$checked === undefined ? false : _props$checked;


    _this.state = {
      checked: defaultChecked || checked
    };
    return _this;
  }

  Checkbox.prototype.componentDidMount = function componentDidMount() {
    _Object$defineProperties(this, {
      checked: {
        get: function get() {
          return this.state.checked;
        },
        set: function set(v) {
          var _this2 = this;

          this.setState({
            checked: !!v
          }, function () {
            if (_this2.props.onChange) {
              _this2.props.onChange({
                target: _this2.input
              });
            }
          });
        }
      }
    });
  };

  Checkbox.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.checked !== this.props.checked) {
      this.setState({
        checked: nextProps.checked
      });
    }
  };

  Checkbox.prototype.render = function render() {
    /* eslint-disable no-unused-vars */
    var _props = this.props,
        size = _props.size,
        children = _props.children,
        className = _props.className,
        style = _props.style,
        disabled = _props.disabled,
        defaultChecked = _props.defaultChecked,
        rest = _objectWithoutProperties(_props, ['size', 'children', 'className', 'style', 'disabled', 'defaultChecked']);

    /* eslint-disable jsx-a11y/label-has-for */


    return React.createElement(
      'label',
      {
        className: cls(_templateObject, !children ? 'checkbox--empty' : '', size ? 'checkbox--' + size : '', className || ''),
        style: style,
        onKeyDown: this.handleKeyDown
      },
      React.createElement('input', _extends({
        ref: this.setWrappedComponentInstance,
        disabled: disabled,
        type: 'checkbox',
        'aria-hidden': true
      }, rest, {
        checked: this.state.checked,
        onChange: this.handleChange
      })),
      React.createElement(
        'span',
        {
          role: 'checkbox',
          className: 'checkbox__text',
          tabIndex: disabled ? -1 : 0,
          'aria-disabled': disabled,
          'aria-checked': this.state.checked
        },
        children
      )
    );
  };

  return Checkbox;
}(PureComponent);

export default Checkbox;


Checkbox.displayName = 'AAUICheckbox';
Checkbox.propTypes = propTypes;
Checkbox.defaultProps = defaultProps;