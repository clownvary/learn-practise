import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import TinyMCE from 'react-tinymce';
import React, { PureComponent, PropTypes } from 'react';
import connectForm from './connectForm';

var string = PropTypes.string,
    func = PropTypes.func,
    shape = PropTypes.shape;

var propTypes = {
  defaultValue: string,
  onChange: func,
  api: shape({
    setValue: func.isRequired,
    onValidate: func.isRequired
  }).isRequired
};

var defaultProps = {
  defaultValue: '',
  config: {
    plugins: 'autolink link image lists print preview textcolor',
    toolbar: 'undo redo | insert | styleselect | fontsizeselect | fontselect | bold italic | forecolor | backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
    textcolor_cols: '5',
    font_formats: 'Arial=arial,helvetica,sans-serif;Courier New=courier new,courier,monospace;AkrutiKndPadmini=Akpdmi-n;ProximaNova=ProximaNova,Arial,sans-serif',
    fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 36pt'
  }
};

var TinyMCEEditor = function (_PureComponent) {
  _inherits(TinyMCEEditor, _PureComponent);

  function TinyMCEEditor() {
    var _temp, _this, _ret;

    _classCallCheck(this, TinyMCEEditor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.onBlur = function (e) {
      var onValidate = _this.props.api.onValidate;

      onValidate(e.target.getContent());
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  TinyMCEEditor.prototype.render = function render() {
    var _props = this.props,
        defaultValue = _props.defaultValue,
        setValue = _props.api.setValue,
        rest = _objectWithoutProperties(_props, ['defaultValue', 'api']);

    return React.createElement(TinyMCE, _extends({
      content: defaultValue,
      onBlur: this.onBlur,
      onChange: function onChange(e) {
        return setValue(e.target.getContent());
      }
    }, rest));
  };

  return TinyMCEEditor;
}(PureComponent);

TinyMCEEditor.displayName = 'AAUITinyMCEEditor';
TinyMCEEditor.propTypes = propTypes;
TinyMCEEditor.defaultProps = defaultProps;

export default connectForm()(TinyMCEEditor);