import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _Object$keys from 'babel-runtime/core-js/object/keys';
import React, { PureComponent, PropTypes } from 'react';

import getContext from '../shared/getContext';
import { FormStorePropTypes } from './types';
import { reduceFields } from './utils';
import Alert from '../Alert';

var aauiFormStore = _Object$keys(FormStorePropTypes)[0];
var bool = PropTypes.bool,
    string = PropTypes.string;

var defaultProps = {
  name: '',
  suppressErrors: true
};
var propTypes = {
  name: string,
  suppressErrors: bool
};

export var FormError = function (_PureComponent) {
  _inherits(FormError, _PureComponent);

  function FormError(props, context) {
    _classCallCheck(this, FormError);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props, context));

    _this.handleChange = function () {
      var fields = _this.store.getState();

      var _reduceFields = reduceFields(fields),
          errors = _reduceFields.errors,
          isValid = _reduceFields.isValid;

      _this.setState({ errors: errors, isValid: isValid });
    };

    _this.state = _extends({ errors: {}, isValid: true }, props);
    _this.store = props[aauiFormStore] || context[aauiFormStore];
    return _this;
  }

  FormError.prototype.componentDidMount = function componentDidMount() {
    this.unsubscribe = this.store.subscribe(this.handleChange);
  };

  FormError.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
    }
  };

  FormError.prototype.render = function render() {
    var _props = this.props,
        name = _props.name,
        suppressErrors = _props.suppressErrors;
    var _state = this.state,
        errors = _state.errors,
        isValid = _state.isValid;

    var filteredErrors = [];
    var fieldNames = _Object$keys(errors);

    if (name) {
      fieldNames = [name];
    }

    fieldNames.forEach(function (k) {
      var error = errors[k];

      if (error && typeof error === 'string') {
        filteredErrors.push([k, error]);
      }
    });

    return !isValid && React.createElement(
      Alert,
      { type: 'danger', noClose: true },
      React.createElement(
        'strong',
        null,
        'Error'
      ),
      React.createElement('br', null),
      !suppressErrors && React.createElement(
        'ul',
        null,
        filteredErrors.map(function (error, index) {
          return React.createElement(
            'li',
            { key: index },
            error[0],
            ' --- '
          );
        })
      )
    );
  };

  return FormError;
}(PureComponent);

FormError.defaultProps = defaultProps;
FormError.propTypes = propTypes;

export default getContext(FormStorePropTypes)(FormError);