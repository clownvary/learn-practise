import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$keys from 'babel-runtime/core-js/object/keys';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _extends from 'babel-runtime/helpers/extends';
import React, { PureComponent, PropTypes } from 'react';

import NestedForm from './NestedForm';
import Form from '../Form';
import TextInput from './TextInput';
import Combobox from './Combobox';
import PostalCodeInput, { POSTAL_CODE_FIELD_KEY } from './PostalCodeInput';
import getContext from '../shared/getContext';
import { aauiL10nPropTypes } from '../shared/types';

var string = PropTypes.string,
    object = PropTypes.object,
    func = PropTypes.func,
    node = PropTypes.node,
    oneOfType = PropTypes.oneOfType;

var propTypes = _extends({
  countriesConfig: object.isRequired,
  fields: object,
  country: string,
  fieldLayout: oneOfType([node, func])
}, aauiL10nPropTypes);
var defaultProps = {
  country: 'US',
  fields: {},
  fieldLayout: Form.HField
};
var FIELD_PREFIX = 'addressForm.addressField';

var AddressEditor = function (_PureComponent) {
  _inherits(AddressEditor, _PureComponent);

  function AddressEditor(props, context) {
    _classCallCheck(this, AddressEditor);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props, context));

    _this.reduceFields = function (country) {
      var _this$props = _this.props,
          fields = _this$props.fields,
          countriesConfig = _this$props.countriesConfig;

      var countryConfig = countriesConfig[country];

      if (!countryConfig || !countryConfig.addressForm) {
        return {};
      }

      var countryAddressFields = countryConfig.addressForm.addressFields;

      return _Object$keys(countryAddressFields).reduce(function (r, k) {
        var _extends3;

        var countryAddressField = countryAddressFields[k];
        var addressPart = countryAddressField.addressPart,
            position = countryAddressField.position;

        var value = fields[addressPart];

        if (!value) {
          return r;
        }

        var valueArr = fields[addressPart].split('\n');

        // It means it has multiple parts for one address part
        if (position > 1) {
          var _extends2;

          return _extends({}, r, (_extends2 = {}, _extends2[addressPart + '.' + position] = valueArr[position - 1] || '', _extends2));
        }

        return _extends({}, r, (_extends3 = {}, _extends3[addressPart] = valueArr[0], _extends3));
      }, { country: country });
    };

    _this.reduceCountryAddressFields = function () {
      var country = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var countriesConfig = _this.props.countriesConfig;

      var countryConfig = countriesConfig[country];

      if (!countryConfig || !countryConfig.addressForm) {
        return [];
      }

      var code = countryConfig.iso3166Code;
      var countryAddressFields = countryConfig.addressForm.addressFields || [];

      return _Object$keys(countryAddressFields).reduce(function (r, k) {
        var countryAddressField = countryAddressFields[k];
        var required = countryAddressField.required,
            addressPart = countryAddressField.addressPart,
            position = countryAddressField.position,
            _countryAddressField$ = countryAddressField.options,
            options = _countryAddressField$ === undefined ? [] : _countryAddressField$;

        // Find the label key

        var label = FIELD_PREFIX + '.' + code + '.' + addressPart;
        if (position > 1) {
          label = label + '.' + position;
        }
        if (!_this.l10n.formatMessage(label)) {
          label = FIELD_PREFIX + '.' + addressPart;
        }

        var component = TextInput;
        var data = options.map(function (option) {
          return {
            text: _this.l10n.formatMessage(addressPart + '.displayName.' + code + '.' + option.fieldOptionValue),
            value: option.fieldOptionValue
          };
        });
        var reducedAddressField = {
          name: position > 1 ? addressPart + '.' + position : addressPart,
          label: label,
          component: component,
          required: required,
          data: data
        };

        if (options && options.length !== 0) {
          reducedAddressField = _extends({}, reducedAddressField, {
            component: Combobox,
            maxHeight: '320px'
          });
        }

        if (addressPart === POSTAL_CODE_FIELD_KEY) {
          reducedAddressField = _extends({}, reducedAddressField, {
            countryConfig: countryConfig,
            component: PostalCodeInput
          });
        }

        return [].concat(r, [reducedAddressField]);
      }, []);
    };

    _this.handlePreChange = function (values) {
      var countriesConfig = _this.props.countriesConfig;
      var country = _this.state.country;

      var valueKeys = _Object$keys(values);
      var countryConfig = countriesConfig[country];
      var countryAddressFields = countryConfig.addressForm.addressFields;

      return _Object$keys(countryAddressFields).reduce(function (r, k) {
        var _extends5;

        var countryAddressField = countryAddressFields[k];
        var addressPart = countryAddressField.addressPart,
            position = countryAddressField.position;

        var addressPartPart = addressPart + '.' + position;
        var addressPartPartValue = values[addressPartPart];

        // If found `line2.2`, `city.2`, `stateProvince.2`, `line2.3` or `city.3`
        if (position > 1 && addressPartPartValue && valueKeys.indexOf(addressPartPart)) {
          var _extends4;

          return _extends({}, r, (_extends4 = {}, _extends4[addressPart] = r[addressPart] + '\n' + addressPartPartValue, _extends4));
        }

        return _extends({}, r, (_extends5 = {}, _extends5[addressPart] = values[addressPart], _extends5));
      }, { country: country });
    };

    _this.handleCountryChange = function (_ref) {
      var country = _ref.value;

      _this.setState({ country: country });
    };

    _this.l10n = props.aauiL10n || context.aauiL10n;
    _this.state = _this.getInitState();
    return _this;
  }

  AddressEditor.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    this.unsubscribe = this.l10n.subscribe(function () {
      return _this2.forceUpdate();
    });
  };

  AddressEditor.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.unsubscribe) {
      this.unsubscribe();
    }

    this.unsubscribe = null;
  };

  AddressEditor.prototype.getInitState = function getInitState() {
    var fields = this.props.fields;

    var country = fields.country;

    if (!country) {
      country = this.props.country;
    }
    return {
      country: country,
      fields: this.reduceFields(country)
    };
  };

  AddressEditor.prototype.getAvailCountries = function getAvailCountries() {
    var _this3 = this;

    var countriesConfig = this.props.countriesConfig;


    return _Object$keys(countriesConfig).map(function (country) {
      return {
        text: _this3.l10n.formatMessage('country.displayName.' + country),
        value: country
      };
    });
  };

  // Split field value into multiple parts for `line2.2`, `city.2`, etc.


  AddressEditor.prototype.render = function render() {
    var _props = this.props,
        FieldLayout = _props.fieldLayout,
        rest = _objectWithoutProperties(_props, ['fieldLayout']);

    var _state = this.state,
        country = _state.country,
        fields = _state.fields;

    var countries = this.getAvailCountries();
    var reducedCountryAddressFields = this.reduceCountryAddressFields(country);

    return React.createElement(
      NestedForm,
      _extends({}, rest, { fields: fields, preChange: this.handlePreChange }),
      React.createElement(
        Form,
        null,
        React.createElement(FieldLayout, {
          maxHeight: '320px',
          name: 'country',
          label: FIELD_PREFIX + '.country',
          component: Combobox,
          data: countries,
          defaultValue: country,
          onChange: this.handleCountryChange
        }),
        reducedCountryAddressFields.map(function (f) {
          return React.createElement(FieldLayout, _extends({
            key: f.name,
            name: f.name
          }, f));
        })
      )
    );
  };

  return AddressEditor;
}(PureComponent);

AddressEditor.propTypes = propTypes;
AddressEditor.defaultProps = defaultProps;

export default getContext(_extends({}, aauiL10nPropTypes))(AddressEditor);