import _taggedTemplateLiteralLoose from 'babel-runtime/helpers/taggedTemplateLiteralLoose';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _templateObject = _taggedTemplateLiteralLoose(['modal ', ' ', ''], ['modal ', ' ', '']);

import React, { PureComponent, PropTypes } from 'react';
import 'active.css/less/components/modal.less';

import { cls } from './shared/utils';

var string = PropTypes.string,
    bool = PropTypes.bool,
    object = PropTypes.object,
    func = PropTypes.func,
    array = PropTypes.array,
    element = PropTypes.element,
    oneOfType = PropTypes.oneOfType;


var propTypes = {
  className: string,
  onClose: func,
  title: string,
  style: object,
  shown: bool,
  children: oneOfType([array, object, func, element])
};

var defaultProps = {
  shown: false
};

var Modal = function (_PureComponent) {
  _inherits(Modal, _PureComponent);

  function Modal() {
    var _temp, _this, _ret;

    _classCallCheck(this, Modal);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.componentDidMount = function () {
      if (_this.props.shown) {
        _this.fixBody();
      }
    }, _this.componentDidUpdate = function (_ref) {
      var shown = _ref.shown;

      if (shown !== _this.props.shown) {
        if (_this.props.shown) {
          _this.fixBody();
        } else {
          _this.unfixBody();
        }
      }
    }, _this.fixBody = function () {
      var bodyStyles = document.body.style;
      var scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;

      _this.bodyOverflowX = bodyStyles.overflowX;
      _this.bodyOverflowY = bodyStyles.overflowY;
      _this.bodyPaddingRight = bodyStyles.paddingRight;

      bodyStyles.overflowX = bodyStyles.overflowY = 'hidden';
      if (scrollbarWidth > 0) {
        var paddingRight = getComputedStyle(document.body).paddingRight;
        _this.root.style.paddingRight = bodyStyles.paddingRight = Number(paddingRight) + Number(scrollbarWidth) + 'px';
      }
    }, _this.unfixBody = function () {
      var bodyStyles = document.body.style;
      bodyStyles.overflowX = _this.bodyOverflowX;
      bodyStyles.overflowY = _this.bodyOverflowY;
      bodyStyles.paddingRight = _this.bodyPaddingRight;
      _this.root.style.paddingRight = '';
    }, _this.render = function () {
      var _this$props = _this.props,
          className = _this$props.className,
          style = _this$props.style,
          title = _this$props.title,
          onClose = _this$props.onClose,
          children = _this$props.children;


      return React.createElement(
        'div',
        { className: 'modal-wrap' },
        React.createElement(
          'div',
          { ref: function ref(_ref3) {
              _this.root = _ref3;
            }, className: cls(_templateObject, _this.props.shown ? 'is-open' : '', className || ''), style: style },
          React.createElement(
            'section',
            { ref: function ref(_ref2) {
                _this.box = _ref2;
              }, className: 'modal-box' },
            React.createElement(
              'header',
              { className: 'modal-header' },
              React.createElement(
                'h3',
                { className: 'modal-title' },
                title
              ),
              React.createElement('span', { onClick: onClose, className: 'icon-close modal-close' })
            ),
            children
          )
        ),
        React.createElement('div', { className: 'modal-mask' })
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  return Modal;
}(PureComponent);

export default Modal;


Modal.displayName = 'AAUIModal';
Modal.propTypes = propTypes;
Modal.defaultProps = defaultProps;