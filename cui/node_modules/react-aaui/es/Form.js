import _extends from 'babel-runtime/helpers/extends';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _Object$keys from 'babel-runtime/core-js/object/keys';

var _Form$contextTypes;

import React, { PureComponent, PropTypes } from 'react';
import 'active.css/less/components/form.less';
import 'active.css/less/components/grid.less';

import FormError from './form/FormError';
import HFormFieldLayout from './form/HFormFieldLayout';
import VFormFieldLayout from './form/VFormFieldLayout';
import createField, { isRegisteredField } from './form/createField';
import Store from './form/store';
import { noop, identity, shallowEqual, filterProps } from './shared/utils';
import { FormPropTypes, FormFieldPropTypes, FormStorePropTypes } from './form/types';
import { reduceFields } from './form/utils';

var aauiFormStore = _Object$keys(FormStorePropTypes)[0];
var FormDefaultConfig = {
  preSubmit: noop,
  shouldSubmit: function shouldSubmit() {
    return true;
  },
  onSubmit: noop,
  postSubmit: noop,
  onFail: noop,
  preChange: identity,
  onChange: noop,
  fields: {}
};

var Form = function (_PureComponent) {
  _inherits(Form, _PureComponent);

  function Form(props, context) {
    _classCallCheck(this, Form);

    // Sync the `this.state` and `this.store.currentState`
    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props, context));

    _this.handleSubmit = function (e) {
      /* eslint-disable */
      e && e.preventDefault && e.preventDefault();

      _this.store.tryInvokeValidators();

      var _this$props = _this.props,
          preSubmit = _this$props.preSubmit,
          shouldSubmit = _this$props.shouldSubmit,
          onSubmit = _this$props.onSubmit,
          postSubmit = _this$props.postSubmit,
          onFail = _this$props.onFail;

      var _reduceFields = reduceFields(_this.store.getState()),
          values = _reduceFields.values,
          errors = _reduceFields.errors,
          isValid = _reduceFields.isValid;

      if (!isValid) {
        return onFail(errors);
      }

      if (shouldSubmit(values, preSubmit(values))) {
        onSubmit(values);
      }

      return postSubmit(values);
    };

    _this.handleChange = function () {
      var fields = _this.store.getState();

      var _reduceFields2 = reduceFields(fields),
          values = _reduceFields2.values,
          errors = _reduceFields2.errors,
          isValid = _reduceFields2.isValid;

      var _reduceFields3 = reduceFields(_this.state.fields),
          currentValues = _reduceFields3.values,
          currentErrors = _reduceFields3.errors;

      var _this$props2 = _this.props,
          preChange = _this$props2.preChange,
          onChange = _this$props2.onChange;


      if (!shallowEqual(currentValues, values) || !shallowEqual(currentErrors, errors)) {
        // trigger 'onChange' here on purpose
        onChange({ values: preChange(values), errors: errors });

        _this.setState({ fields: fields, isValid: isValid });
      }
    };

    _this.state = _this.getInitState();
    _this.parentStore = props[aauiFormStore] || context[aauiFormStore];
    _this.store = new Store(_extends({}, props, {
      initialState: _this.state.fields
    }));
    // Keep the child store reference from the parent store
    if (_this.parentStore) {
      _this.parentStore.childStoreList = [].concat(_this.parentStore.childStoreList, [_this.store]);
    }
    return _this;
  }

  Form.prototype.getChildContext = function getChildContext() {
    var _ref;

    return _ref = {}, _ref[aauiFormStore] = this.store, _ref;
  };

  Form.prototype.componentDidMount = function componentDidMount() {
    this.unsubscribe = this.store.subscribe(this.handleChange);
  };

  Form.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
    }
  };

  Form.prototype.getInitState = function getInitState() {
    /* eslint-disable max-len */
    // {fieldName:{defaultValue:"first name",validator:validator,rules:"",parser:a=>a,formatter:a=>a},email:{defaultValue:"defalut@defalut.com"}};
    var fields = this.props.fields;

    var reducedFields = _Object$keys(fields).filter(function (k) {
      return fields[k];
    }).reduce(function (r, k) {
      var _extends2;

      var field = fields[k];
      var value = void 0;

      // If `field` is string then it's value by default
      if (typeof field === 'string') {
        value = field;
      } else {
        value = field.value || field.defaultValue;
      }

      return _extends({}, r, (_extends2 = {}, _extends2[k] = _extends({}, filterProps(field, _Object$keys(FormFieldPropTypes)), {
        value: value
      }), _extends2));
    }, {});

    return { fields: reducedFields, isValid: true };
  };

  // Here maybe it's better to have react's `context` but it's fine now
  Form.prototype.traverseChildren = function traverseChildren(children, fields) {
    var _this2 = this;

    return React.Children.map(children, function (child) {
      // If `child` is not Element then just return it
      if (!React.isValidElement(child)) {
        return child;
      }

      var childProps = {};

      if (isRegisteredField(child.type)) {
        childProps = _extends({}, childProps, fields[child.props.name]);
      }

      childProps.children = _this2.traverseChildren(child.props.children, fields);

      return React.cloneElement(child, childProps);
    });
  };

  Form.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        _props$className = _props.className,
        className = _props$className === undefined ? 'form--horizontal' : _props$className;
    var fields = this.state.fields;

    var formChildren = this.traverseChildren(children, fields);

    // If we have the `this.parentStore` then it means we're the nested form
    if (this.parentStore) {
      return React.createElement(
        'div',
        null,
        formChildren
      );
    }

    // Todo: Update the error message with `Form.Error`
    return React.createElement(
      'form',
      {
        className: className,
        onSubmit: this.handleSubmit
      },
      formChildren
    );
  };

  return Form;
}(PureComponent);

export default Form;


Form.propTypes = _extends({}, FormPropTypes);
Form.contextTypes = (_Form$contextTypes = {}, _Form$contextTypes[aauiFormStore] = PropTypes.instanceOf(Store), _Form$contextTypes);
Form.childContextTypes = _extends({}, FormStorePropTypes);
Form.defaultProps = _extends({}, FormDefaultConfig);
Form.displayName = 'AAUIForm';
// Form Fields
Form.Field = createField();
Form.HField = createField(HFormFieldLayout);
Form.VField = createField(VFormFieldLayout);
Form.Error = FormError;

/**
 * Provide utility function and lifecycle methods for `Form`
 */
export var createForm = function createForm() {
  var formConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (WrappedComponent) {
    var Connect = function (_PureComponent2) {
      _inherits(Connect, _PureComponent2);

      function Connect() {
        _classCallCheck(this, Connect);

        return _possibleConstructorReturn(this, _PureComponent2.apply(this, arguments));
      }

      Connect.prototype.render = function render() {
        return React.createElement(WrappedComponent, this.props);
      };

      return Connect;
    }(PureComponent);

    Connect.defaultProps = _extends({}, FormDefaultConfig, formConfig);

    return Connect;
  };
};