import _Object$assign from 'babel-runtime/core-js/object/assign';
import _taggedTemplateLiteralLoose from 'babel-runtime/helpers/taggedTemplateLiteralLoose';
import _Object$defineProperties from 'babel-runtime/core-js/object/define-properties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _templateObject = _taggedTemplateLiteralLoose(['aaui-icon-left-arrow\n                              aaui-carousel-left-arrow\n                              ', ''], ['aaui-icon-left-arrow\n                              aaui-carousel-left-arrow\n                              ', '']),
    _templateObject2 = _taggedTemplateLiteralLoose(['aaui-icon-right-arrow\n                              aaui-carousel-right-arrow\n                              ', ''], ['aaui-icon-right-arrow\n                              aaui-carousel-right-arrow\n                              ', '']);

import React, { PureComponent, PropTypes } from 'react';
/* eslint import/extensions: 0, import/no-unresolved: 0 */
/* eslint import/no-extraneous-dependencies: 0, import/no-webpack-loader-syntax: 0 */
import TweenLite from 'imports?define=>false!gsap/src/uncompressed/TweenLite';
import 'imports?define=>false!gsap/src/uncompressed/plugins/CSSPlugin';

import { cls } from './shared/utils';

import './Carousel.less';

var string = PropTypes.string,
    object = PropTypes.object,
    func = PropTypes.func,
    array = PropTypes.array,
    element = PropTypes.element,
    oneOfType = PropTypes.oneOfType,
    number = PropTypes.number,
    any = PropTypes.any;


var carouselPropTypes = {
  className: string,
  style: object,
  children: oneOfType([array, object, func, element]),
  selected: number,
  defaultSelected: number,
  onChange: func
};

var defaultCarouselPropTypes = {
  shown: false
};

var Carousel = function (_PureComponent) {
  _inherits(Carousel, _PureComponent);

  function Carousel(props) {
    _classCallCheck(this, Carousel);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

    _this.select = function (ind) {
      return function () {
        if (_this.props.selected === undefined) {
          _this.setState({ selected: ind }, function () {
            if (_this.props.onChange) _this.props.onChange(ind);
          });
        } else if (_this.props.onChange) _this.props.onChange(ind);
      };
    };

    _this.state = {
      selected: _this.props.selected != null ? _this.props.selected : _this.props.defaultSelected || 0
    };
    return _this;
  }

  Carousel.prototype.componentDidMount = function componentDidMount() {
    _Object$defineProperties(this, {
      selected: {
        get: function get() {
          return this.state.selected;
        },
        set: function set(v) {
          if (this.props.selected === undefined) {
            this.setState({ selected: v });
          }
        }
      }
    });

    var slidesCount = React.Children.count(this.props.children);
    TweenLite.set(this.slides, { x: '-' + 100 / slidesCount * this.state.selected + '%' });
  };

  /* eslint no-nested-ternary:  */


  Carousel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var newState = {
      selected: nextProps.selected !== this.props.selected ? nextProps.selected : nextProps.defaultSelected !== this.props.defaultSelected ? this.state.selected === undefined ? nextProps.defaultSelected : this.state.selected : this.state.selected
    };
    if (newState.selected !== this.state.selected) this.setState(newState);
  };

  Carousel.prototype.componentDidUpdate = function componentDidUpdate(_, _ref) {
    var prevSelected = _ref.selected;

    var selected = this.state.selected;
    if (prevSelected !== selected) {
      var slidesCount = React.Children.count(this.props.children);
      TweenLite.to(this.slides, 0.3, { x: '-' + 100 / slidesCount * selected + '%' });
    }
  };

  Carousel.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        className = _props.className,
        style = _props.style,
        children = _props.children;
    var selected = this.state.selected;

    var slidesCount = React.Children.count(children);
    var slides = React.Children.map(children, function (slide) {
      return React.cloneElement(slide, { slidesCount: slidesCount });
    });

    return React.createElement(
      'div',
      {
        className: 'aaui-carousel ' + (className || ''),
        style: style
      },
      React.createElement(
        'div',
        {
          ref: function ref(_ref2) {
            _this2.slides = _ref2;
          },
          className: 'aaui-carousel-slides',
          style: { width: 100 * slidesCount + '%' }
        },
        slides
      ),
      React.createElement(
        'ul',
        { className: 'aaui-carousel-arrows' },
        React.createElement(
          'li',
          null,
          React.createElement('span', {
            className: cls(_templateObject, selected === 0 ? 'aaui-hidden' : ''),
            onClick: this.select(selected - 1)
          })
        ),
        React.createElement(
          'li',
          null,
          React.createElement('span', {
            className: cls(_templateObject2, selected === slidesCount - 1 ? 'aaui-hidden' : ''),
            onClick: this.select(selected + 1)
          })
        )
      ),
      React.createElement(
        'ul',
        { className: 'aaui-carousel-dot' },
        React.Children.map(children, function (slide, i) {
          return React.createElement('li', {
            key: i,
            className: i === selected ? 'aaui-carousel-active-dot' : undefined,
            onClick: _this2.select(i)
          });
        })
      )
    );
  };

  return Carousel;
}(PureComponent);

Carousel.displayName = 'AAUICarousel';
Carousel.propTypes = carouselPropTypes;
Carousel.defaultProps = defaultCarouselPropTypes;

var slidePropTypes = {
  className: string,
  style: object,
  children: any,
  slidesCount: number
};

var defaultSlidePropTypes = {
  shown: false
};

/* eslint react/no-multi-comp: 0 */

var Slide = function (_PureComponent2) {
  _inherits(Slide, _PureComponent2);

  function Slide() {
    _classCallCheck(this, Slide);

    return _possibleConstructorReturn(this, _PureComponent2.apply(this, arguments));
  }

  Slide.prototype.render = function render() {
    var _props2 = this.props,
        className = _props2.className,
        style = _props2.style,
        children = _props2.children,
        slidesCount = _props2.slidesCount;


    return React.createElement(
      'div',
      {
        className: 'aaui-carousel-slide ' + (className || ''),
        style: _Object$assign({ width: 100 / slidesCount + '%' }, style)
      },
      children
    );
  };

  return Slide;
}(PureComponent);

Slide.displayName = 'AAUICarouselSlide';
Slide.propTypes = slidePropTypes;
Slide.defaultProps = defaultSlidePropTypes;

Carousel.Slide = Slide;

export default Carousel;