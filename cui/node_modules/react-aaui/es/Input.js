import _extends from 'babel-runtime/helpers/extends';
import _taggedTemplateLiteralLoose from 'babel-runtime/helpers/taggedTemplateLiteralLoose';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$defineProperties from 'babel-runtime/core-js/object/define-properties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _templateObject = _taggedTemplateLiteralLoose(['input-group\n        ', '\n        ', '\n        ', ''], ['input-group\n        ', '\n        ', '\n        ', '']),
    _templateObject2 = _taggedTemplateLiteralLoose(['icon ', ''], ['icon ', '']);

import React, { PureComponent, PropTypes } from 'react';
import 'active.css/less/components/input.less';
import 'active.css/less/components/input-group.less';

import { cls } from './shared/utils';

var bool = PropTypes.bool,
    string = PropTypes.string,
    func = PropTypes.func,
    object = PropTypes.object,
    any = PropTypes.any;


var propTypes = {
  value: string,
  defaultValue: string,
  type: string.isRequired,
  size: string,
  preIcon: string,
  preText: string,
  postIcon: string,
  postText: string,
  errored: bool,
  disabled: bool,
  className: string,
  style: object,
  onChange: func,
  children: any
};

var defaultProps = {
  type: 'text'
};

var Input = function (_PureComponent) {
  _inherits(Input, _PureComponent);

  function Input(props) {
    _classCallCheck(this, Input);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

    _this.setWrappedComponentInstance = function (input) {
      _this.input = input;
    };

    _this.handleChange = function (e) {
      // If you want to access the event properties in an asynchronous way,
      // you should call `event.persist()`` on the event,
      // which will remove the synthetic event from the pool
      // and allow references to the event to be retained by user code.
      e.persist();

      _this.setState({
        value: e.target.value
      }, function () {
        if (_this.props.onChange) {
          _this.props.onChange(e);
        }
      });
    };

    var _props$value = props.value,
        value = _props$value === undefined ? '' : _props$value,
        _props$defaultValue = props.defaultValue,
        defaultValue = _props$defaultValue === undefined ? '' : _props$defaultValue;


    _this.state = {
      value: value || defaultValue
    };
    return _this;
  }

  Input.prototype.componentDidMount = function componentDidMount() {
    _Object$defineProperties(this, {
      value: {
        get: function get() {
          return this.input.value;
        },
        set: function set(v) {
          if (this.props.value === undefined) {
            this.input.value = v;
          }
        }
      }
    });
  };

  // Data displayed by a controlled component is received through props passed down
  // from it's parent/container component.
  // Sync props -> state


  Input.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.value !== this.props.value) {
      this.setState({
        value: nextProps.value
      });
    }
  };

  // Controlled components have functions to govern the data going into them
  // on every onChange event, rather than grabbing the data only once,
  // e.g. when a user clicks a submit button.
  // This 'governed' data is then saved to state


  Input.prototype.render = function render() {
    var _props = this.props,
        type = _props.type,
        size = _props.size,
        preIcon = _props.preIcon,
        preText = _props.preText,
        postIcon = _props.postIcon,
        postText = _props.postText,
        errored = _props.errored,
        disabled = _props.disabled,
        className = _props.className,
        style = _props.style,
        rest = _objectWithoutProperties(_props, ['type', 'size', 'preIcon', 'preText', 'postIcon', 'postText', 'errored', 'disabled', 'className', 'style']);

    return React.createElement(
      'div',
      {
        className: cls(_templateObject, size ? 'input-group--' + size : '', errored ? 'input-group--error' : '', className || ''),
        style: style
      },
      preIcon || preText ? React.createElement(
        'span',
        {
          className: 'input-group__item'
        },
        preIcon && React.createElement('i', { className: cls(_templateObject2, preIcon) }),
        preText
      ) : undefined,
      React.createElement('input', _extends({}, rest, {
        type: type,
        disabled: disabled,
        className: 'input input-group__field',
        ref: this.setWrappedComponentInstance,
        value: this.state.value,
        onChange: this.handleChange
      })),
      postIcon || postText ? React.createElement(
        'span',
        {
          className: 'input-group__item'
        },
        postIcon && React.createElement('i', { className: cls(_templateObject2, postIcon) }),
        postText
      ) : undefined
    );
  };

  return Input;
}(PureComponent);

export default Input;


Input.displayName = 'AAUIInput';
Input.propTypes = propTypes;
Input.defaultProps = defaultProps;