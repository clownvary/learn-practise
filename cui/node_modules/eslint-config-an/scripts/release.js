const semver = require('semver');
const prompt = require('readline-sync').question;
const resolvePath = require('path').resolve;
const readFileSync = require('fs').readFileSync;
const argv = require('yargs').argv;
const exec = require('./exec');

if (process.cwd() !== resolvePath(__dirname, '..')) {
  console.error('The release script must be run from the repo root');
  process.exit(1);
}

const getPackageVersion = () =>
  JSON.parse(readFileSync(resolvePath(__dirname, '../package.json'))).version;


// Get the next version, which may be specified as a semver
// version number or anything `npm version` recognizes. This
// is a "pre-release" if nextVersion is premajor, preminor,
// prepatch, or prerelease

let isPrerelease = false;
const auto = !!argv['release-version'] || !!argv['auto'];
const pre = isPrerelease = argv['pre'];
const preid = 'beta';
const curVersion = getPackageVersion();
let nextVersion = argv['release-version'] || semver.inc(curVersion, pre ? 'prepatch' : 'patch', preid);

if (!auto) {
  nextVersion = prompt(`Current version is (${curVersion}).\nPress ENTER to use (${nextVersion}) or type your own for next version:`) || nextVersion;
}

const nver = nextVersion;
nextVersion = semver.clean(nextVersion);
if (!nextVersion || !semver.valid(nextVersion)){
  console.error(`ERROR: Invalid next version (${nver})!`);
  process.exit(0);
}

if (semver.lte(nextVersion, curVersion)){
  console.error(`ERROR: Use a value larger than current version (${curVersion}!`);
  process.exit(0);
}

if (!auto){
  isPrerelease = nextVersion.indexOf('-') !== -1
}

exec('git add .', {stage: 'adding to repo'})
  .then(() => exec('git commit --allow-empty -m "Before update version"', {stage: 'committing'}))
  .then(() => exec(`npm version ${nextVersion} -m "Bump version to %s"`, {stage: 'bumping version'}))
  .then(() => exec('git push --no-verify origin HEAD:master', {stage: 'pushing to remote'}))
  .then(() => exec(`git push -f --no-verify origin v${nextVersion}`, {stage: `tagging v${nextVersion} to remote`}))
  .then(() => {
    // 9) Push the "latest" tag to GitLab
    if (!isPrerelease) {
      return exec('git tag -f latest', {stage: 'tagging latest'})
        .then(() => {
          exec('git push -f --no-verify origin latest', {stage: 'pushing latest tag to remote'});
        });
    }
  })
  .catch(error => console.error(error));
