import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _extends from 'babel-runtime/helpers/extends';
import React, { PureComponent } from 'react';

import L10n from './L10n';
import getContext from './getContext';
import { interpolate } from './utils';
import { aauiL10nPropTypes } from './types';

var propTypes = _extends({}, aauiL10nPropTypes);

var L10nMessage = function (_PureComponent) {
  _inherits(L10nMessage, _PureComponent);

  function L10nMessage(props, context) {
    _classCallCheck(this, L10nMessage);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props, context));

    _this.l10n = props.aauiL10n || context.aauiL10n || new L10n();
    _this.unsubscribe = null;
    return _this;
  }

  L10nMessage.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    // Todo: maybe we should use `setState` instead of `forceUpdate` here
    this.unsubscribe = this.l10n.subscribe(function () {
      return _this2.forceUpdate();
    });
  };

  L10nMessage.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.unsubscribe) {
      this.unsubscribe();
    }

    this.unsubscribe = null;
  };

  L10nMessage.prototype.render = function render() {
    var _props = this.props,
        id = _props.id,
        values = _props.values;
    var messages = this.l10n.messages;


    return React.createElement(
      'span',
      null,
      messages[id] ? interpolate(messages[id], values) : id
    );
  };

  return L10nMessage;
}(PureComponent);

L10nMessage.propTypes = propTypes;

export default getContext(_extends({}, aauiL10nPropTypes))(L10nMessage);
module.exports = exports['default'];