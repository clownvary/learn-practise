import _extends from 'babel-runtime/helpers/extends';
import _taggedTemplateLiteralLoose from 'babel-runtime/helpers/taggedTemplateLiteralLoose';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Array$from from 'babel-runtime/core-js/array/from';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';

var _templateObject = _taggedTemplateLiteralLoose(['aaui-tageditor\n                       ', '\n                       ', ''], ['aaui-tageditor\n                       ', '\n                       ', '']);

import React, { PureComponent, PropTypes } from 'react';

import * as da from './shared/data-access';
import { cls } from './shared/utils';
import Tag from './Tag';

import './TagEditor.less';

var lastFocusedElement = null;

function trackLastFocusedElement() {
  lastFocusedElement = document.activeElement;
}

function stopPropagation(e) {
  e.stopPropagation();
}

var propTypes = {
  className: PropTypes.string,
  data: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,
  onChange: PropTypes.func,
  errored: PropTypes.bool
};

var defaultProps = {
  data: [],
  errored: false
};

var TagEditor = function (_PureComponent) {
  _inherits(TagEditor, _PureComponent);

  function TagEditor() {
    var _temp, _this, _ret;

    _classCallCheck(this, TagEditor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.addTag = function () {
      if (lastFocusedElement && lastFocusedElement.tagName === 'INPUT') return;
      var d = _this.props.data;
      var data = da.push(_Array$from(d), { text: 'your tag name', isNew: true });
      var onChange = _this.props.onChange;
      if (onChange) onChange(data);
    }, _this.removeTag = function (ind) {
      return function () {
        var d = _this.props.data;
        var data = da.del(_Array$from(d), ind);
        var onChange = _this.props.onChange;
        if (onChange) onChange(data);
      };
    }, _this.editTag = function (ind) {
      return function (text, isKeyFinished) {
        var d = _this.props.data;
        var data = d;
        if (text === '') {
          data = da.del(_Array$from(d), ind);
        } else {
          data = da.set(_Array$from(d), ind, { text: text });

          if (isKeyFinished && ind === da.count(d) - 1) {
            data = da.push(_Array$from(data), { text: 'your tag name', isNew: true });
          }
        }

        var onChange = _this.props.onChange;
        if (onChange) onChange(data);
      };
    }, _this.removeEmptyTagIfNew = function (ind) {
      return function () {
        var d = _this.props.data;
        var data = d;

        if (da.getIn(d, ind, 'isNew')) {
          data = da.del(_Array$from(d), ind);
          var onChange = _this.props.onChange;
          if (onChange) onChange(data);
        }
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  TagEditor.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (da.count(this.props.data) > da.count(prevProps.data)) {
      var lastTag = this.tag;
      if (lastTag) lastTag.toInput();
    }
  };

  TagEditor.prototype.render = function render() {
    var _this2 = this;

    /* eslint-disable no-unused-vars */
    var _props = this.props,
        className = _props.className,
        data = _props.data,
        onChange = _props.onChange,
        errored = _props.errored,
        rest = _objectWithoutProperties(_props, ['className', 'data', 'onChange', 'errored']);

    return React.createElement(
      'div',
      _extends({
        className: cls(_templateObject, errored ? 'aaui-tageditor-errored' : '', className || '')
      }, rest, {
        onMouseDown: trackLastFocusedElement,
        onClick: this.addTag
      }),
      data.map(function (tag, i) {
        return React.createElement(Tag, {
          key: i,
          ref: function ref(tagRef) {
            _this2.tag = tagRef;
          },
          value: da.get(tag, 'text'),
          isNew: !!da.get(tag, 'isNew'),
          editMode: true,
          onChange: _this2.editTag(i),
          onCancel: _this2.removeEmptyTagIfNew(i),
          onClose: _this2.removeTag(i),
          onClick: stopPropagation
        });
      })
    );
  };

  return TagEditor;
}(PureComponent);

export default TagEditor;


TagEditor.displayName = 'AAUITagEditor';
TagEditor.propTypes = propTypes;
TagEditor.defaultProps = defaultProps;
module.exports = exports['default'];