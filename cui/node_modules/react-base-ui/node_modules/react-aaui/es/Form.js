import _extends from 'babel-runtime/helpers/extends';
import _Object$keys from 'babel-runtime/core-js/object/keys';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { PureComponent, PropTypes } from 'react';
import 'active.css/less/components/form.less';
import 'active.css/less/components/grid.less';

import Alert from './Alert';
import HFormFieldLayout from './form/HFormFieldLayout';
import createField, { isRegisteredField } from './form/createField';
import Store from './form/store';
import { noop, shallowEqual, filterProps } from './shared/utils';
import { FormPropTypes, FormFieledPropTypes } from './form/types';
import { setError } from './form/module';

var FormDefaultConfig = {
  preSubmit: noop,
  shouldSubmit: function shouldSubmit() {
    return true;
  },
  onSubmit: noop,
  postSubmit: noop,
  onFail: noop,
  onChange: noop,
  fields: {}
};

var Form = function (_PureComponent) {
  _inherits(Form, _PureComponent);

  function Form(props, context) {
    _classCallCheck(this, Form);

    /*
      fields: {
        firstName: {
          defaultValue: 'first name',
          validator: validator,
          rules: '',
          parser: v => v,
          formatter: v => v,
        },
        email: {
          defaultValue: 'defalut@defalut.com',
        },
      },
    */
    // Every form field input is treated as contorlled
    // Convert `defaultValue` to `value`
    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props, context));

    _initialiseProps.call(_this);

    var fieldKeys = _Object$keys(props.fields);
    var formFieldKeys = _Object$keys(FormFieledPropTypes);
    var fields = fieldKeys.reduce(function (r, name) {
      var _extends2;

      return _extends({}, r, (_extends2 = {}, _extends2[name] = _extends({}, filterProps(props.fields[name], formFieldKeys), {
        value: props.fields[name].defaultValue
      }), _extends2));
    }, {});
    // Sync the `this.state` and `this.store.currentState`
    _this.state = {
      fields: fields,
      isValid: true
    };
    _this.store = new Store(_extends({}, props, {
      initialState: fields
    }));
    return _this;
  }

  Form.prototype.getChildContext = function getChildContext() {
    return {
      aauiFormStore: this.store
    };
  };

  Form.prototype.componentDidMount = function componentDidMount() {
    this.unsubscribe = this.store.subscribe(this.handleChange);
  };

  Form.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
    }
  };

  Form.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        _props$className = _props.className,
        className = _props$className === undefined ? 'form--horizontal' : _props$className;
    var _state = this.state,
        isValid = _state.isValid,
        fields = _state.fields;

    // Todo: Update the error message

    return React.createElement(
      'form',
      { className: className, onSubmit: this.handleSubmit },
      !isValid && React.createElement(
        Alert,
        { type: 'danger', noClose: true },
        React.createElement(
          'strong',
          null,
          'Error'
        )
      ),
      React.Children.map(children, function (child) {
        if (isRegisteredField(child.type)) {
          return React.cloneElement(child, _extends({}, fields[child.props.name]));
        } else {
          return child;
        }
      })
    );
  };

  return Form;
}(PureComponent);

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.handleSubmit = function (e) {
    /* eslint-disable */
    e && e.preventDefault && e.preventDefault();

    var validationResults = _this2.store.tryInvokeValidators();

    validationResults.forEach(function (r) {
      if (r.errMsg) {
        _this2.store.dispatch(setError({
          name: r.name,
          value: r.errMsg
        }));
      }
    });

    var _props2 = _this2.props,
        preSubmit = _props2.preSubmit,
        shouldSubmit = _props2.shouldSubmit,
        onSubmit = _props2.onSubmit,
        postSubmit = _props2.postSubmit,
        onFail = _props2.onFail;

    var fields = _this2.store.getState();
    var values = {};
    var errors = {};
    var reducerKeys = _Object$keys(fields);

    for (var i = 0; i < reducerKeys.length; i++) {
      var key = reducerKeys[i];

      values[key] = fields[key].value;
      errors[key] = fields[key].errMsg;
    }

    var isValid = _Object$keys(fields).every(function (k) {
      return !fields[k].errMsg;
    });

    if (!isValid) {
      return onFail(errors);
    }

    if (shouldSubmit(values, preSubmit(values))) {
      onSubmit(values);
    }

    return postSubmit(values);
  };

  this.handleChange = function () {
    var fields = _this2.store.getState();
    var isValid = _Object$keys(fields).every(function (k) {
      return !fields[k].errMsg;
    });

    if (!shallowEqual(_this2.state.fields, fields)) {
      _this2.setState({ isValid: isValid, fields: fields }, function () {
        var onChange = _this2.props.onChange;


        onChange(fields);
      });
    }
  };
};

export default Form;


Form.propTypes = _extends({}, FormPropTypes);
Form.childContextTypes = {
  aauiFormStore: PropTypes.object.isRequired
};
Form.defaultProps = _extends({}, FormDefaultConfig);
Form.displayName = 'AAUIForm';
// Form Fields
Form.Field = createField();
Form.HField = createField(HFormFieldLayout);

/**
 * Provide utility function and lifecycle methods for `Form`
 */
export var createForm = function createForm() {
  var formConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (WrappedComponent) {
    var Connect = function (_PureComponent2) {
      _inherits(Connect, _PureComponent2);

      function Connect() {
        _classCallCheck(this, Connect);

        return _possibleConstructorReturn(this, _PureComponent2.apply(this, arguments));
      }

      Connect.prototype.render = function render() {
        return React.createElement(WrappedComponent, this.props);
      };

      return Connect;
    }(PureComponent);

    Connect.defaultProps = _extends({}, FormDefaultConfig, formConfig);

    return Connect;
  };
};