import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import React, { createElement, PureComponent, PropTypes } from 'react';

import getDisplayName from '../shared/getDisplayName';

var string = PropTypes.string,
    bool = PropTypes.bool,
    func = PropTypes.func,
    oneOfType = PropTypes.oneOfType;

var NON_LAYOUT_FIELD = 'NonLayoutField';
var formFields = [];

var propTypes = {
  errMsg: string,
  label: string,
  required: bool,
  component: oneOfType([func, string]).isRequired
};

export var registerFormField = function registerFormField(Field) {
  if (formFields.indexOf(Field) < 0) {
    formFields.push(Field);
  }
};

export var isRegisteredField = function isRegisteredField(type) {
  return formFields.indexOf(type) >= 0;
};

var createField = function createField(FieldLayout) {
  var Field = function (_PureComponent) {
    _inherits(Field, _PureComponent);

    function Field() {
      _classCallCheck(this, Field);

      return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
    }

    Field.prototype.render = function render() {
      var _props = this.props,
          component = _props.component,
          errMsg = _props.errMsg,
          label = _props.label,
          rest = _objectWithoutProperties(_props, ['component', 'errMsg', 'label']);

      if (FieldLayout) {
        return React.createElement(
          FieldLayout,
          _extends({ label: label, errMsg: errMsg, required: this.props.required }, rest),
          createElement(component, _extends({ errMsg: errMsg, label: label }, rest))
        );
      }

      return createElement(component, _extends({ errMsg: errMsg, label: label }, rest));
    };

    return Field;
  }(PureComponent);

  Field.displayName = 'FormField(' + getDisplayName(FieldLayout || NON_LAYOUT_FIELD) + ')';
  Field.propTypes = propTypes;

  registerFormField(Field);

  return Field;
};

export default createField;