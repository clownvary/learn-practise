import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _extends from 'babel-runtime/helpers/extends';
import { PropTypes, PureComponent, createElement } from 'react';

import getDisplayName from '../shared/getDisplayName';
import { identity, reduceReducers } from '../shared/utils';
import { ValidationResult, ruleRunner } from './validation';
import reducer, { setValue, setError } from './module';
import { FormFieledPropTypes } from './types';
import { aauiL10nPropTypes } from '../shared/types';

var string = PropTypes.string,
    bool = PropTypes.bool,
    object = PropTypes.object;


var FormFieldConfig = {
  /* eslint-disable no-unused-vars */
  validator: function validator(_ref) {
    var l10n = _ref.l10n;
    return function (validationResult) {
      return validationResult;
    };
  },
  parser: identity,
  formatter: identity
};

var connectForm = function connectForm() {
  var formFieldConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (WrappedComponent) {
    var connectDisplayName = 'Connect(' + getDisplayName(WrappedComponent) + ')';
    var propTypes = _extends({}, FormFieledPropTypes, {
      errMsg: string,
      required: bool,
      aauiFormStore: object
    }, aauiL10nPropTypes);

    var Connect = function (_PureComponent) {
      _inherits(Connect, _PureComponent);

      function Connect(props, context) {
        _classCallCheck(this, Connect);

        var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props, context));

        _this.onValidate = function (value) {
          var _this$validate = _this.validate(value),
              errMsg = _this$validate.errMsg;

          _this.setError(errMsg);
        };

        _this.setValue = function (value) {
          _this.store.dispatch(setValue({
            name: _this.props.name,
            value: value
          }));
        };

        _this.setError = function (value) {
          _this.store.dispatch(setError({
            name: _this.props.name,
            value: value
          }));
        };

        _this.setWrappedComponentInstance = function (ref) {
          _this.wrappedComponentInstance = ref;
        };

        _this.getApi = function () {
          return {
            l10n: _this.l10n,
            onValidate: _this.onValidate,
            setValue: _this.setValue
          };
        };

        _this.validate = function (value) {
          var _this$props = _this.props,
              name = _this$props.name,
              required = _this$props.required,
              validator = _this$props.validator,
              parser = _this$props.parser,
              _this$props$rules = _this$props.rules,
              rules = _this$props$rules === undefined ? '' : _this$props$rules,
              rest = _objectWithoutProperties(_this$props, ['name', 'required', 'validator', 'parser', 'rules']);

          var validators = [];

          validators.push(ruleRunner);

          // Here is for your custom validation function
          if (validator && typeof validator === 'function') {
            validators.push(validator);
          }

          var chain = validators.map(function (validateFunc) {
            return validateFunc(_extends({
              l10n: _this.l10n,
              rules: required ? 'required|' + rules : rules
            }, rest));
          });

          var _reduceReducers = reduceReducers.apply(undefined, chain)(new ValidationResult(name, parser(value.trim()), null)),
              errMsg = _reduceReducers.errMsg;

          // Here the `errMsg` is the key for specified message,
          // users need to consume it through `L10nMessage` component


          return {
            name: name,
            value: value,
            errMsg: errMsg
          };
        };

        _this.store = props.aauiFormStore || context.aauiFormStore;
        _this.l10n = props.aauiL10n || context.aauiL10n;
        return _this;
      }

      Connect.prototype.componentWillMount = function componentWillMount() {
        if (!this.unregister) {
          this.unregister = this.store.injectReducer(this.props.name, reducer);
        }

        if (!this.unregisterValidator && this.store.injectValidator) {
          this.unregisterValidator = this.store.injectValidator(this.props.name, this.validate);
        }
      };

      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.unregister) {
          this.unregister(this.props.name);
        }

        this.unregister = null;

        if (this.unregisterValidator) {
          this.unregisterValidator(this.props.name);
        }

        this.unregisterValidator = null;
      };

      Connect.prototype.getWrappedComponentInstance = function getWrappedComponentInstance() {
        return this.wrappedComponentInstance;
      };

      Connect.prototype.render = function render() {
        /* eslint-disable no-unused-vars */
        var _props = this.props,
            required = _props.required,
            validator = _props.validator,
            errMsg = _props.errMsg,
            aauiFormStore = _props.aauiFormStore,
            formatter = _props.formatter,
            parser = _props.parser,
            value = _props.value,
            rest = _objectWithoutProperties(_props, ['required', 'validator', 'errMsg', 'aauiFormStore', 'formatter', 'parser', 'value']);

        this.renderedElement = createElement(WrappedComponent, _extends({
          ref: this.setWrappedComponentInstance,
          api: this.getApi(),
          value: errMsg ? value : formatter(value)
        }, rest));

        return this.renderedElement;
      };

      return Connect;
    }(PureComponent);

    Connect.displayName = connectDisplayName;
    Connect.WrappedComponent = WrappedComponent;
    Connect.propTypes = propTypes;
    Connect.contextTypes = _extends({
      aauiFormStore: object
    }, aauiL10nPropTypes);
    Connect.defaultProps = _extends({}, FormFieldConfig, formFieldConfig);

    return Connect;
  };
};

export default connectForm;
module.exports = exports['default'];