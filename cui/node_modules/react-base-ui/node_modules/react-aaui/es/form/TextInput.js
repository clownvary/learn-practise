import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import _extends from 'babel-runtime/helpers/extends';
import React, { PureComponent } from 'react';

import connectForm from './connectForm';
import Input from '../Input';
import { FormFieldAPIPropTypes } from './types';

var propTypes = _extends({}, FormFieldAPIPropTypes);

var TextInput = function (_PureComponent) {
  _inherits(TextInput, _PureComponent);

  function TextInput() {
    var _temp, _this, _ret;

    _classCallCheck(this, TextInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.onBlur = function () {
      var onValidate = _this.props.api.onValidate;


      onValidate(_this.input.value);
    }, _this.setWrappedComponentInstance = function (input) {
      _this.input = input;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  TextInput.prototype.render = function render() {
    /* eslint-disable no-unused-vars*/
    var _props = this.props,
        setValue = _props.api.setValue,
        rules = _props.rules,
        rest = _objectWithoutProperties(_props, ['api', 'rules']);

    return React.createElement(Input, _extends({
      onBlur: this.onBlur,
      onChange: function onChange(e) {
        return setValue(e.target.value);
      },
      ref: this.setWrappedComponentInstance,
      type: 'text'
    }, rest));
  };

  return TextInput;
}(PureComponent);

TextInput.displayName = 'TextInput';
TextInput.propTypes = propTypes;

export default connectForm()(TextInput);
module.exports = exports['default'];