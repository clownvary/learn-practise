'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _isElement = require('lodash/isElement');

var _isElement2 = _interopRequireDefault(_isElement);

var _has = require('lodash/has');

var _has2 = _interopRequireDefault(_has);

var _LoadingBar = require('./components/LoadingBar');

var _LoadingBar2 = _interopRequireDefault(_LoadingBar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Loading = function () {
  function Loading() {
    var targetElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3.default)(this, Loading);

    if (targetElement && !(0, _isElement2.default)(targetElement)) {
      options = targetElement;
      targetElement = document.body;
    }

    this.tartgetElement = targetElement;
    this.options = options;
    this.wrapperElement = this.tartgetElement.appendChild(document.createElement('div'));
    this.counter = 0;
    this.tranactions = {};
  }

  Loading.prototype.isLoading = function isLoading() {
    return this.counter > 0;
  };

  Loading.prototype.show = function show() {
    if (this.counter === 0) {
      var _options$text = this.options.text,
          text = _options$text === undefined ? '' : _options$text;

      try {
        _reactDom2.default.render(_react2.default.createElement(_LoadingBar2.default, { text: text }), this.wrapperElement);
      } catch (e) {
        console.error(e);
        this.counter = -1;
      }
    }

    this.counter = this.counter + 1;
    return this;
  };

  Loading.prototype.hide = function hide() {
    if (this.counter > 0) {
      this.counter = this.counter - 1;

      if (this.counter === 0) {
        _reactDom2.default.unmountComponentAtNode(this.wrapperElement);
      }
    }
  };

  Loading.prototype.startTransaction = function startTransaction() {
    var _this = this;

    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

    if ((0, _has2.default)(this.tranactions, name)) {
      console.warn('Transaction ' + name + ' already exist');
    } else {
      this.transactions[name] = setTimeout(function () {
        var id = _this.transactions[name];
        if (id) {
          console.warn('Transaction ' + name + ' time out');
          _this.endTransaction(name);
        }
      }, 30000);
      this.show();
    }
  };

  Loading.prototype.endTransaction = function endTransaction(name) {
    var id = this.transactions[name];
    if (id) {
      clearTimeout(id);
      delete this.tranactions[name];
      this.hide();
    } else {
      console.warn('Transaction ' + name + ' not found');
    }
  };

  return Loading;
}();

exports.default = Loading;
module.exports = exports['default'];