'use strict';

exports.__esModule = true;

var _getOwnPropertySymbols = require('babel-runtime/core-js/object/get-own-property-symbols');

var _getOwnPropertySymbols2 = _interopRequireDefault(_getOwnPropertySymbols);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _clone = require('lodash/clone');

var _clone2 = _interopRequireDefault(_clone);

var _last = require('lodash/last');

var _last2 = _interopRequireDefault(_last);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Events() {}

function EventListener(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

var EventEmitter = function () {
  function EventEmitter() {
    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '~';
    var topOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    (0, _classCallCheck3.default)(this, EventEmitter);

    this.prefix = prefix;
    this.topOnly = topOnly;
    this._events = new Events();
    this._eventsCount = 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    var _this = this;

    var names = [];
    var events = void 0;

    if (this._eventsCount === 0) return names;

    this._events.keys.forEach(function (name) {
      return names.push(_this.prefix ? name.slice(1) : name);
    });

    if (_getOwnPropertySymbols2.default) {
      return names.concat((0, _getOwnPropertySymbols2.default)(events));
    }

    return names;
  };

  EventEmitter.prototype.listeners = function listeners(event, exists) {
    var evt = this.prefix ? this.prefix + event : event;
    var available = this._events[evt];

    if (exists) return !!available;
    if (!available) return [];
    if (available.fn) return [available.fn];

    return (0, _clone2.default)(available);
  };

  EventEmitter.prototype.emit = function emit(event) {
    var _this2 = this;

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var evt = this.prefix ? this.prefix + event : event;

    if (!this._events[evt]) return false;

    var listeners = this._events[evt];
    if (listeners.fn) {
      listeners = [listeners];
    }

    var fire = function fire(listener) {
      if (listener.once) _this2._removeListener(event, listener.fn, undefined, true);
      listener.fn.apply(listener.context, args);
    };

    if (this.topOnly) {
      fire((0, _last2.default)(listeners));
    } else {
      listeners.forEach(function (listener) {
        return fire(listener);
      });
    }

    return true;
  };

  EventEmitter.prototype._addListener = function _addListener(event, fn, context) {
    var once = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    var listener = new EventListener(fn, context || this, once);
    var evt = this.prefix ? this.prefix + event : event;

    if (!this._events[evt]) {
      this._events[evt] = listener;
      this._eventsCount = this._eventsCount + 1;
    } else if (!this._events[evt].fn) this._events[evt].push(listener);else {
      this._events[evt] = [this._events[evt], listener];
    }

    return this;
  };

  EventEmitter.prototype._removeListener = function _removeListener(event, fn, context, once) {
    var evt = this.prefix ? this.prefix + event : event;

    if (!this._events[evt]) return this;
    if (!fn) {
      this._eventsCount = this._eventsCount - 1;
      if (this._eventsCount === 0) {
        this._events = new Events();
      } else {
        delete this._events[evt];
      }
      return this;
    }

    var listeners = this._events[evt];
    if (listeners.fn) {
      listeners = [listeners];
    }

    listeners = listeners.filter(function (listener) {
      return listener.fn !== fn || once && !listener.once || context && listener.context !== context;
    });

    if (listeners.length) {
      this._events[evt] = listeners.length === 1 ? listeners[0] : listeners;
    } else {
      this._eventsCount = this._eventsCount - 1;
      if (this._eventsCount === 0) {
        this._events = new Events();
      } else {
        delete this._events[evt];
      }
    }

    return this;
  };

  EventEmitter.prototype.on = function on(event, fn, context) {
    return this._addListener(event, fn, context);
  };

  EventEmitter.prototype.once = function once(event, fn, context) {
    return this._addListener(event, fn, context, true);
  };

  EventEmitter.prototype.off = function off(event, fn, context, once) {
    return this._removeListener(event, fn, context, once);
  };

  EventEmitter.prototype.isOn = function isOn(event, fn) {
    var evt = this.prefix ? this.prefix + event : event;

    if (!this._events[evt] || !fn) return false;

    var listeners = this._events[evt];
    if (listeners.fn) {
      listeners = [listeners];
    }

    return listeners.some(function (listener) {
      return listener.fn === fn;
    });
  };

  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt = void 0;

    if (event) {
      evt = this.prefix ? this.prefix + event : event;
      if (this._events[evt]) {
        this._eventsCount = this._eventsCount - 1;
        if (this._eventsCount === 0) {
          this._events = new Events();
        } else {
          delete this._events[evt];
        }
      }
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  return EventEmitter;
}();

exports.default = EventEmitter;
module.exports = exports['default'];