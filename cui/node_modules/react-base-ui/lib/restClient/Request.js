'use strict';

exports.__esModule = true;

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _ContentTypeEnum = require('./consts/ContentTypeEnum');

var ContentTypeEnum = _interopRequireWildcard(_ContentTypeEnum);

var _toQueryString = require('../utils/toQueryString');

var _toQueryString2 = _interopRequireDefault(_toQueryString);

var _processHeaders = require('./processHeaders');

var _processHeaders2 = _interopRequireDefault(_processHeaders);

var _Response = require('./Response');

var _Response2 = _interopRequireDefault(_Response);

var _errors = require('../errors');

var _messages = require('../messages');

var _loading = require('../loading');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// avoid warning when developer dosn't handle api error.
window.addEventListener('unhandledrejection', function (e) {
  e.preventDefault();
});

var Request = function Request() {
  var _this = this;

  (0, _classCallCheck3.default)(this, Request);

  ['get', 'post', 'put', 'patch', 'delete', 'head'].forEach(function (method) {
    _this[method] = function (path, data) {
      var headers = {};
      var body = void 0;
      if (data) {
        if (data.body) {
          headers = data.headers || {};
          body = data.body;
        } else {
          body = data;
        }
      }

      var fetchConfig = {
        method: method,
        headers: (0, _processHeaders2.default)(method, headers),
        credentials: 'include'
      };

      if (!__STATIC__) {
        var params = body;
        if (fetchConfig.headers['Content-Type'] !== ContentTypeEnum.JSON) {
          params = (0, _toQueryString2.default)(body);
        }

        if (method !== 'get' && method !== 'delete') {
          fetchConfig.body = (0, _stringify2.default)(params);
        } else {
          var paramsString = params ? params + '&' : '';
          path = '' + path + (path.indexOf('?') !== -1 ? '&' : '?') + paramsString + 'ui_random=' + new Date().getTime();
        }
      }

      _loading.pageLoading.show();
      return (0, _isomorphicFetch2.default)(path, fetchConfig).then(function () {
        var httpResponse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var status = httpResponse.status,
            _httpResponse$statusT = httpResponse.statusText,
            statusText = _httpResponse$statusT === undefined ? '' : _httpResponse$statusT,
            ok = httpResponse.ok;

        if (ok) {
          return httpResponse.json();
        }
        _loading.pageLoading.hide();
        var msgGroup = new _messages.MessageGroup(_messages.MessageTypeEnum.ERROR, statusText, 'HTTP Error - ' + status);
        return _bluebird2.default.reject(new _errors.ErrorObj(_errors.ErrorTypeEnum.HTTP, msgGroup, {
          code: status,
          url: path,
          response: httpResponse
        }));
      }).then(function (jsonResponse) {
        var response = new _Response2.default(jsonResponse);
        _loading.pageLoading.hide();
        if (response.success) {
          return response;
        }

        var msgGroup = new _messages.MessageGroup(_messages.MessageTypeEnum.ERROR, response.message, 'Service Error - ' + response.code);
        return _bluebird2.default.reject(new _errors.ErrorObj(_errors.ErrorTypeEnum.SERVICE, msgGroup, {
          code: response.code,
          url: path,
          system: response.system,
          response: jsonResponse
        }));
      });
    };
  });
};

Request.instance = new Request();
exports.default = Request;
module.exports = exports['default'];