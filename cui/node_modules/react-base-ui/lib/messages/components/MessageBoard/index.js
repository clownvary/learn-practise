'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _bind = require('lodash/bind');

var _bind2 = _interopRequireDefault(_bind);

var _find = require('lodash/find');

var _find2 = _interopRequireDefault(_find);

var _union = require('lodash/union');

var _union2 = _interopRequireDefault(_union);

var _clone = require('lodash/clone');

var _clone2 = _interopRequireDefault(_clone);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Messages = require('../Messages');

var _Messages2 = _interopRequireDefault(_Messages);

var _emitter = require('../../emitter');

var _emitter2 = _interopRequireDefault(_emitter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MessageBoard = function (_Component) {
  (0, _inherits3.default)(MessageBoard, _Component);

  function MessageBoard(props) {
    (0, _classCallCheck3.default)(this, MessageBoard);

    var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, props));

    _this.add = (0, _bind2.default)(_this.add, _this);
    _this.clean = (0, _bind2.default)(_this.clean, _this);
    _this.onClose = (0, _bind2.default)(_this.onClose, _this);

    _this.state = {
      groups: []
    };
    return _this;
  }

  MessageBoard.prototype.componentDidMount = function componentDidMount() {
    var _props$autoEnable = this.props.autoEnable,
        autoEnable = _props$autoEnable === undefined ? true : _props$autoEnable;

    if (autoEnable) {
      this.enable();
    }
  };

  MessageBoard.prototype.componentWillUnmount = function componentWillUnmount() {
    var _props$autoEnable2 = this.props.autoEnable,
        autoEnable = _props$autoEnable2 === undefined ? true : _props$autoEnable2;

    if (autoEnable) {
      this.disable();
    }
  };

  MessageBoard.prototype.onClose = function onClose(id) {
    var groups = this.state.groups || [];
    groups = groups.filter(function (group) {
      return group.id !== id;
    });

    this.setState({
      groups: groups
    });
  };

  MessageBoard.prototype.enable = function enable() {
    if (!_emitter2.default.isOn('add/notify', this.add)) {
      _emitter2.default.on('add/notify', this.add);
      _emitter2.default.on('clean/notify', this.clean);
    }
  };

  MessageBoard.prototype.disable = function disable() {
    _emitter2.default.off('add/notify', this.add);
    _emitter2.default.off('clean/notify', this.clean);
  };

  MessageBoard.prototype.add = function add(msgGroup) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (options.dismissable) {
      msgGroup.dismissable = true;
    }

    var groups = options.autoClean ? [] : (0, _clone2.default)(this.state.groups);
    if (options.autoClean) {
      groups.push(msgGroup);
    } else if (options.noDuplicated) {
      var found = (0, _find2.default)(groups, function (g) {
        return g.type === msgGroup;
      });
      if (found) {
        found.messages = (0, _union2.default)(found.messages, msgGroup.messages);
      } else {
        groups.push(msgGroup);
      }
    }

    this.setState({
      groups: groups
    });
  };

  MessageBoard.prototype.clean = function clean() {
    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var groups = [];
    if (type) {
      groups = this.state.groups || [];
      groups = groups.filter(function (group) {
        return group.type !== type;
      });
    }

    this.setState({
      groups: groups
    });
  };

  MessageBoard.prototype.renderMessageGroup = function renderMessageGroup(msgGroup) {
    return _react2.default.createElement(_Messages2.default, {
      msgGroup: msgGroup,
      onClose: this.onClose
    });
  };

  MessageBoard.prototype.render = function render() {
    var _this2 = this;

    var groups = this.state.groups;

    return _react2.default.createElement(
      'div',
      { className: 'message-board' },
      groups && groups.map(function (msgGroup) {
        return _this2.renderMessageGroup(msgGroup);
      })
    );
  };

  return MessageBoard;
}(_react.Component);

MessageBoard.displayName = 'MessageBoard';
MessageBoard.propTypes = {
  autoEnable: _react.PropTypes.bool
};
MessageBoard.defaultProps = {};
exports.default = MessageBoard;
module.exports = exports['default'];