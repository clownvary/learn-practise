import Promise from 'bluebird';
import React from 'react';
import ReactDOM from 'react-dom';

const createConfirmation = Component => (props) => {
  const wrapper = document.body.appendChild(document.createElement('div'));

  function dispose() {
    setTimeout(() => {
      ReactDOM.unmountComponentAtNode(wrapper);
      setTimeout(() => wrapper.remove());
    }, 1000);
  }

  const promise = new Promise((resolve, reject) => {
    try {
      ReactDOM.render(
        <Component reject={reject} resolve={resolve} dispose={dispose} {...props} />,
        wrapper
      );
    } catch (e) {
      console.error(e);
      throw e;
    }
  });

  promise.suppressUnhandledRejections();
  return promise.then(
    (result) => {
      dispose();
      return result;
    }).catch((result) => {
      dispose();
      return Promise.reject(result);
    });
};

export default createConfirmation;
