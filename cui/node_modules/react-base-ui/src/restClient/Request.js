import Promise from 'bluebird';
import fetch from 'isomorphic-fetch';
import * as ContentTypeEnum from './consts/ContentTypeEnum';
import toQueryString from '../utils/toQueryString';
import processHeaders from './processHeaders';
import Response from './Response';
import { ErrorObj, ErrorTypeEnum } from '../errors';
import { MessageGroup, MessageTypeEnum } from '../messages';
import { pageLoading } from '../loading';

// avoid warning when developer dosn't handle api error.
window.addEventListener('unhandledrejection', (e) => {
  e.preventDefault();
});


export default class Request {

  static instance = new Request()

  constructor() {
    ['get', 'post', 'put', 'patch', 'delete', 'head'].forEach((method) => {
      this[method] = (path, data) => {
        let headers = {};
        let body;
        if (data) {
          if (data.body) {
            headers = data.headers || {};
            body = data.body;
          } else {
            body = data;
          }
        }

        const fetchConfig = {
          method,
          headers: processHeaders(method, headers),
          credentials: 'include'
        };

        if (!__STATIC__) {
          let params = body;
          if (fetchConfig.headers['Content-Type'] !== ContentTypeEnum.JSON) {
            params = toQueryString(body);
          }

          if (method !== 'get' && method !== 'delete') {
            fetchConfig.body = JSON.stringify(params);
          } else {
            const paramsString = params ? `${params}&` : '';
            path = `${path}${path.indexOf('?') !== -1 ? '&' : '?'}${paramsString}ui_random=${new Date().getTime()}`;
          }
        }

        pageLoading.show();
        return fetch(path, fetchConfig)
          .then((httpResponse = {}) => {
            const { status, statusText = '', ok } = httpResponse;
            if (ok) {
              return httpResponse.json();
            }
            pageLoading.hide();
            const msgGroup = new MessageGroup(MessageTypeEnum.ERROR, statusText, `HTTP Error - ${status}`);
            return Promise.reject(new ErrorObj(ErrorTypeEnum.HTTP, msgGroup, {
              code: status,
              url: path,
              response: httpResponse
            }));
          })
          .then((jsonResponse) => {
            const response = new Response(jsonResponse);
            pageLoading.hide();
            if (response.success) {
              return response;
            }

            const msgGroup = new MessageGroup(MessageTypeEnum.ERROR, response.message, `Service Error - ${response.code}`);
            return Promise.reject(new ErrorObj(ErrorTypeEnum.SERVICE, msgGroup, {
              code: response.code,
              url: path,
              system: response.system,
              response: jsonResponse
            }));
          });
      };
    });
  }
}
