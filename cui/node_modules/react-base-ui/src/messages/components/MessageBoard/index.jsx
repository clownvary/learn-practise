import bind from 'lodash/bind';
import find from 'lodash/find';
import union from 'lodash/union';
import clone from 'lodash/clone';
import React, { Component, PropTypes } from 'react';
import Messages from '../Messages';
import emitter from '../../emitter';

class MessageBoard extends Component {
  static displayName = 'MessageBoard';

  static propTypes = {
    autoEnable: PropTypes.bool
  };

  static defaultProps = {
  };

  constructor(props) {
    super(props);

    this.add = bind(this.add, this);
    this.clean = bind(this.clean, this);
    this.onClose = bind(this.onClose, this);

    this.state = {
      groups: []
    };
  }

  componentDidMount() {
    const { autoEnable = true } = this.props;
    if (autoEnable) {
      this.enable();
    }
  }

  componentWillUnmount() {
    const { autoEnable = true } = this.props;
    if (autoEnable) {
      this.disable();
    }
  }

  onClose(id) {
    let groups = this.state.groups || [];
    groups = groups.filter(group => group.id !== id);

    this.setState({
      groups
    });
  }

  enable() {
    if (!emitter.isOn('add/notify', this.add)) {
      emitter.on('add/notify', this.add);
      emitter.on('clean/notify', this.clean);
    }
  }

  disable() {
    emitter.off('add/notify', this.add);
    emitter.off('clean/notify', this.clean);
  }

  add(msgGroup, options = {}) {
    if (options.dismissable) {
      msgGroup.dismissable = true;
    }

    const groups = options.autoClean ? [] : clone(this.state.groups);
    if (options.autoClean) {
      groups.push(msgGroup);
    } else if (options.noDuplicated) {
      const found = find(groups, g => g.type === msgGroup);
      if (found) {
        found.messages = union(found.messages, msgGroup.messages);
      } else {
        groups.push(msgGroup);
      }
    }

    this.setState({
      groups
    });
  }

  clean(type = '') {
    let groups = [];
    if (type) {
      groups = this.state.groups || [];
      groups = groups.filter(group => group.type !== type);
    }

    this.setState({
      groups
    });
  }

  renderMessageGroup(msgGroup) {
    return (
      <Messages
        msgGroup={msgGroup}
        onClose={this.onClose}
      />
    );
  }

  render() {
    const groups = this.state.groups;

    return (
      <div className="message-board">
        {groups && groups.map(msgGroup => this.renderMessageGroup(msgGroup))}
      </div>
    );
  }
}

export default MessageBoard;
